#set($layout="indexlayout.vm")
{"results":{"lang":"js","period":["2014-07-19","2014-07-18","2014-07-17","2014-07-13","2014-07-12","2014-07-11","2014-07-10","2014-07-09","2014-07-08","2014-07-07","2014-07-06","2014-07-05","2014-07-04","2014-07-03","2014-07-02","2014-07-01","2014-06-30","2014-06-29","2014-06-28","2014-06-27","2014-06-26","2014-06-25","2014-06-24","2014-06-23","2014-06-22","2014-06-21","2014-06-20","2014-06-19","2014-06-18","2014-06-17","2014-06-16","2014-06-15","2014-06-14","2014-06-13","2014-06-12","2014-06-11","2014-06-10","2014-06-09","2014-06-08","2014-06-07","2014-06-04","2014-06-03","2014-06-02","2014-06-01","2014-05-31","2014-05-30","2014-05-29","2014-05-28","2014-05-27","2014-05-26","2014-05-25","2014-05-24","2014-05-23","2014-05-22","2014-05-21","2014-05-20","2014-05-19","2014-05-18","2014-05-17","2014-05-16","2014-05-15","2014-05-14","2014-05-13","2014-05-12","2014-05-11","2014-05-10","2014-05-09","2014-05-08","2014-05-07","2014-05-06","2014-05-05","2014-05-04","2014-05-03","2014-05-02","2014-05-01","2014-04-30","2014-04-29","2014-04-28","2014-04-27","2014-04-26","2014-04-25","2014-04-24","2014-04-23","2014-04-22","2014-04-21","2014-04-20","2014-04-19","2014-04-18","2014-04-17","2014-04-16","2014-04-15","2014-04-14","2014-04-13","2014-04-12","2014-04-11","2014-04-10","2014-04-09","2014-04-08","2014-04-07","2014-04-06","2014-04-05","2014-04-04","2014-04-03","2014-04-02","2014-04-01","2014-03-31","2014-03-30","2014-03-29","2014-03-28","2014-03-27","2014-03-26","2014-03-25","2014-03-24","2014-03-23","2014-03-22","2014-03-21","2014-03-20","2014-03-19","2014-03-18","2014-03-17","2014-03-16","2014-03-15","2014-03-14","2014-03-13","2014-03-12","2014-03-11","2014-03-10","2014-03-09","2014-03-08","2014-03-07","2014-03-06","2014-03-05","2014-03-04","2014-03-03","2014-03-01","2014-02-28","2014-02-26","2014-02-24","2014-02-22","2014-02-21","2014-02-20","2014-02-18","2014-02-17","2014-02-16","2014-02-14","2014-02-13","2014-02-12","2014-02-11","2014-02-10","2014-02-09","2014-02-08","2014-02-07","2014-02-06","2014-02-05","2014-02-04","2014-02-03","2014-02-02","2014-02-01","2014-01-31","2014-01-30","2014-01-29","2014-01-28","2014-01-27","2014-01-26","2014-01-25","2014-01-24","2014-01-23","2014-01-22","2014-01-21","2014-01-20","2014-01-19","2014-01-18","2014-01-17","2014-01-16","2014-01-15","2014-01-14","2014-01-13","2014-01-12","2014-01-11","2014-01-10","2014-01-09","2014-01-08","2014-01-07","2014-01-06","2014-01-05","2014-01-04","2014-01-03","2014-01-02","2014-01-01","2013-12-31","2013-12-30","2013-12-29","2013-12-28","2013-12-27","2013-12-26","2013-12-25","2013-12-24","2013-12-23","2013-12-22","2013-12-21","2013-12-20","2013-12-19","2013-12-18","2013-12-17","2013-12-16","2013-12-15","2013-12-14","2013-12-13","2013-12-12","2013-12-11","2013-12-10","2013-12-09","2013-12-08","2013-12-07","2013-12-06","2013-12-05","2013-12-04","2013-12-03","2013-12-02","2013-12-01","2013-11-30","2013-11-29","2013-11-28","2013-11-27","2013-11-26","2013-11-25","2013-11-24","2013-11-23","2013-11-22","2013-11-21","2013-11-20","2013-11-19","2013-11-18","2013-11-17","2013-11-16","2013-11-15","2013-11-14","2013-11-13","2013-11-12","2013-11-11","2013-11-10","2013-11-09","2013-11-08","2013-11-07","2013-11-06","2013-11-05","2013-11-04","2013-11-03","2013-11-02","2013-11-01","2013-10-31","2013-10-30","2013-10-29","2013-10-28","2013-10-27","2013-10-26","2013-10-25","2013-10-24","2013-10-23","2013-10-22","2013-10-21","2013-10-20","2013-10-19","2013-10-18","2013-10-17","2013-10-16","2013-10-15","2013-10-14","2013-10-13","2013-10-12","2013-10-11","2013-10-10","2013-10-09","2013-10-08","2013-10-07","2013-10-06","2013-10-05","2013-10-04","2013-10-03","2013-10-02","2013-10-01","2013-09-30","2013-09-29","2013-09-28","2013-09-27","2013-09-26","2013-09-25","2013-09-24","2013-09-23","2013-09-22","2013-09-21","2013-09-20","2013-09-19","2013-09-18","2013-09-17","2013-09-16","2013-09-15","2013-09-14","2013-09-13","2013-09-12","2013-09-11","2013-09-10","2013-09-09","2013-09-08","2013-09-07","2013-09-06","2013-09-05","2013-09-04","2013-09-03","2013-09-02","2013-09-01","2013-08-31","2013-08-30","2013-08-29","2013-08-28","2013-08-27","2013-08-26","2013-08-25","2013-08-24","2013-08-23","2013-08-22","2013-08-21","2013-08-20","2013-08-19","2013-08-18","2013-08-17","2013-08-16","2013-08-15","2013-08-14","2013-08-13","2013-08-12","2013-08-11","2013-08-10","2013-08-09","2013-08-08","2013-08-07","2013-08-06","2013-08-05","2013-08-04","2013-08-03","2013-08-02","2013-08-01","2013-07-31","2013-07-30","2013-07-29","2013-07-28","2013-07-27","2013-07-26","2013-07-25","2013-07-24","2013-07-23","2013-07-22","2013-07-21","2013-07-20","2013-07-19","2013-07-18","2013-07-17","2013-07-16","2013-07-15","2013-07-14","2013-07-13"],"raw":[{"lang":"js","file":"2014-07-19","convention":{"lang":"js","comma":{"first":6962217,"last":98255323,"commits":1744100,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}],"total":105217540},"indent":{"tab":179677078,"space":747946506,"commits":3213334,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}],"total":927623584},"functiondef":{"onespace":21215982,"nospace":43994123,"commits":1917450,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}],"total":65210105},"argumentdef":{"onespace":8054889,"nospace":125411090,"commits":2401207,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}],"total":133465979},"literaldef":{"tracespace":57564434,"bothspace":12547172,"nospace":20036419,"commits":2059609,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}],"total":90148025},"conditionstatement":{"onespace":48872546,"nospace":13104376,"commits":1838198,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}],"total":61976922},"quotes":{"single":109529604,"double":84001263,"commits":2737242,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}],"total":193530867}}},{"lang":"js","file":"2014-07-18","convention":{"lang":"js","comma":{"first":23447,"last":609255,"commits":4796,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":535175,"space":2406166,"commits":8783,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":52232,"nospace":125509,"commits":5192,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25478,"nospace":329030,"commits":6529,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":174578,"bothspace":29691,"nospace":68079,"commits":5719,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":131992,"nospace":32579,"commits":4974,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":291455,"double":672453,"commits":7580,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-17","convention":{"lang":"js","comma":{"first":9579,"last":125210,"commits":2839,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":203173,"space":919822,"commits":5330,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":22372,"nospace":51945,"commits":3018,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10262,"nospace":149387,"commits":3905,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":83529,"bothspace":11977,"nospace":24933,"commits":3368,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":62029,"nospace":15815,"commits":3057,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":143712,"double":106914,"commits":4545,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-13","convention":{"lang":"js","comma":{"first":12625,"last":251522,"commits":4276,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":566704,"space":1934855,"commits":7972,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56245,"nospace":106236,"commits":4912,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25686,"nospace":315732,"commits":6011,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":158200,"bothspace":28483,"nospace":48796,"commits":5185,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":129527,"nospace":31416,"commits":4569,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":262422,"double":198862,"commits":6879,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-12","convention":{"lang":"js","comma":{"first":21876,"last":304041,"commits":5743,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":703244,"space":2693203,"commits":10554,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":78341,"nospace":153531,"commits":6342,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33919,"nospace":453618,"commits":7846,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":210970,"bothspace":45992,"nospace":62163,"commits":6828,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":177576,"nospace":50044,"commits":5873,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":383067,"double":244529,"commits":9251,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-11","convention":{"lang":"js","comma":{"first":6956,"last":172521,"commits":3469,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":280045,"space":1274817,"commits":6280,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":39201,"nospace":72696,"commits":3740,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15833,"nospace":218119,"commits":4711,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":98127,"bothspace":21622,"nospace":29632,"commits":4104,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":91729,"nospace":15912,"commits":3528,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":206408,"double":144252,"commits":5449,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-10","convention":{"lang":"js","comma":{"first":7476,"last":187462,"commits":4543,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":334726,"space":1378768,"commits":8527,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":36745,"nospace":84939,"commits":4977,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":14106,"nospace":230635,"commits":6314,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":115511,"bothspace":29967,"nospace":35622,"commits":5302,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":88062,"nospace":23949,"commits":4825,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":211169,"double":152277,"commits":7216,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-09","convention":{"lang":"js","comma":{"first":8109,"last":254503,"commits":4272,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":361222,"space":1695134,"commits":7670,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":42822,"nospace":94938,"commits":4439,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24578,"nospace":257751,"commits":5589,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":128327,"bothspace":25309,"nospace":37626,"commits":4852,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":109495,"nospace":19152,"commits":4221,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":281456,"double":187357,"commits":6596,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-08","convention":{"lang":"js","comma":{"first":3499,"last":182313,"commits":3033,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":259121,"space":1231549,"commits":5525,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":39191,"nospace":69022,"commits":3387,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17789,"nospace":196932,"commits":4131,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":83544,"bothspace":15235,"nospace":30250,"commits":3553,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":78368,"nospace":19376,"commits":3117,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":190508,"double":160224,"commits":4837,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-07","convention":{"lang":"js","comma":{"first":6052,"last":101785,"commits":2405,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":246241,"space":877415,"commits":4421,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":27895,"nospace":51810,"commits":2567,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13275,"nospace":149962,"commits":3252,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":64316,"bothspace":18378,"nospace":26224,"commits":2780,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":60398,"nospace":15585,"commits":2503,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":142476,"double":71390,"commits":3847,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-06","convention":{"lang":"js","comma":{"first":19289,"last":401888,"commits":5637,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":683363,"space":2643605,"commits":10496,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75787,"nospace":138198,"commits":6351,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":40918,"nospace":416374,"commits":7827,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":198664,"bothspace":39722,"nospace":62920,"commits":6744,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":175175,"nospace":42406,"commits":5923,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":383019,"double":372854,"commits":9178,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-05","convention":{"lang":"js","comma":{"first":6710,"last":185885,"commits":3011,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":408464,"space":1387320,"commits":5740,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":41949,"nospace":73401,"commits":3556,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22357,"nospace":226761,"commits":4301,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":98435,"bothspace":18721,"nospace":29525,"commits":3698,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":99586,"nospace":20157,"commits":3188,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":212253,"double":151829,"commits":5140,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-04","convention":{"lang":"js","comma":{"first":1151,"last":84569,"commits":1769,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":144677,"space":583367,"commits":3203,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":14372,"nospace":29145,"commits":1848,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8309,"nospace":89124,"commits":2346,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":42940,"bothspace":8427,"nospace":14415,"commits":1979,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":39284,"nospace":7870,"commits":1737,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":93118,"double":68825,"commits":2688,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-03","convention":{"lang":"js","comma":{"first":6037,"last":201134,"commits":3809,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":380926,"space":1332242,"commits":7059,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":31331,"nospace":78050,"commits":4107,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22055,"nospace":204255,"commits":5141,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":102113,"bothspace":20185,"nospace":32901,"commits":4371,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":85067,"nospace":22298,"commits":3840,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":191459,"double":180560,"commits":6025,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-02","convention":{"lang":"js","comma":{"first":5909,"last":180406,"commits":3351,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":314064,"space":1246128,"commits":6214,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":32501,"nospace":73056,"commits":3538,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":12507,"nospace":209490,"commits":4508,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":91444,"bothspace":26940,"nospace":32449,"commits":3852,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":86256,"nospace":19023,"commits":3324,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":191702,"double":164414,"commits":5302,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-07-01","convention":{"lang":"js","comma":{"first":7182,"last":82211,"commits":2135,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":215941,"space":714279,"commits":3835,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":21609,"nospace":42298,"commits":2280,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10489,"nospace":122250,"commits":2896,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":57513,"bothspace":13095,"nospace":17364,"commits":2509,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":50386,"nospace":11822,"commits":2196,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":104208,"double":72377,"commits":3362,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-30","convention":{"lang":"js","comma":{"first":6041,"last":158201,"commits":3183,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":355065,"space":1239743,"commits":5919,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":28689,"nospace":71619,"commits":3450,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18023,"nospace":201092,"commits":4387,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":104726,"bothspace":20715,"nospace":26375,"commits":3732,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":88353,"nospace":20541,"commits":3369,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":188071,"double":117004,"commits":5095,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-29","convention":{"lang":"js","comma":{"first":10708,"last":361198,"commits":5365,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":781443,"space":2505096,"commits":10000,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67040,"nospace":144508,"commits":5881,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27607,"nospace":439999,"commits":7346,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":190217,"bothspace":44856,"nospace":67714,"commits":6499,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":187390,"nospace":46306,"commits":5576,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":395142,"double":283575,"commits":8538,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-28","convention":{"lang":"js","comma":{"first":17216,"last":306247,"commits":5642,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":768809,"space":2406436,"commits":10323,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":76638,"nospace":130718,"commits":6307,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24740,"nospace":409873,"commits":7868,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":187115,"bothspace":42312,"nospace":60899,"commits":6853,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":163616,"nospace":46921,"commits":5928,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":353596,"double":259183,"commits":9097,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-27","convention":{"lang":"js","comma":{"first":11729,"last":292450,"commits":5467,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":564561,"space":2225744,"commits":9946,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66314,"nospace":128275,"commits":5985,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25559,"nospace":378342,"commits":7533,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":172383,"bothspace":35773,"nospace":52364,"commits":6455,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":151002,"nospace":38403,"commits":5665,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":348760,"double":236237,"commits":8568,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-26","convention":{"lang":"js","comma":{"first":8572,"last":128815,"commits":3050,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":274813,"space":1134356,"commits":5785,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":32270,"nospace":72084,"commits":3340,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16075,"nospace":194952,"commits":4236,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":84836,"bothspace":17900,"nospace":26988,"commits":3580,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":74624,"nospace":21184,"commits":3197,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":175447,"double":111767,"commits":4894,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-25","convention":{"lang":"js","comma":{"first":6661,"last":240984,"commits":4545,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":395653,"space":1766506,"commits":8458,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":47290,"nospace":102687,"commits":4803,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26636,"nospace":293843,"commits":6162,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":135974,"bothspace":26076,"nospace":39417,"commits":5283,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126773,"nospace":26066,"commits":4696,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":273963,"double":187783,"commits":7198,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-24","convention":{"lang":"js","comma":{"first":7994,"last":248738,"commits":3866,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":314180,"space":1522834,"commits":7071,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":44480,"nospace":79431,"commits":3982,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10520,"nospace":248210,"commits":5085,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":125147,"bothspace":18778,"nospace":38214,"commits":4422,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":96217,"nospace":23917,"commits":3897,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":240727,"double":212526,"commits":5990,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-23","convention":{"lang":"js","comma":{"first":5234,"last":134376,"commits":2892,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":253575,"space":1089673,"commits":5290,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":33903,"nospace":61564,"commits":3062,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8627,"nospace":188869,"commits":3896,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":81388,"bothspace":14604,"nospace":28018,"commits":3376,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":71973,"nospace":19029,"commits":3015,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":176448,"double":113749,"commits":4522,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-22","convention":{"lang":"js","comma":{"first":15242,"last":357430,"commits":5606,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":653495,"space":2493348,"commits":10568,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":77545,"nospace":137137,"commits":6418,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33682,"nospace":422770,"commits":7973,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":202010,"bothspace":49363,"nospace":62051,"commits":6754,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":175977,"nospace":42396,"commits":6103,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":391865,"double":267165,"commits":9190,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-21","convention":{"lang":"js","comma":{"first":21277,"last":274793,"commits":5320,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":575864,"space":2194004,"commits":9936,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66660,"nospace":121713,"commits":5841,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":29697,"nospace":369753,"commits":7282,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":163381,"bothspace":31561,"nospace":55543,"commits":6436,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":152123,"nospace":36567,"commits":5461,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":333218,"double":234052,"commits":8600,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-20","convention":{"lang":"js","comma":{"first":5525,"last":114833,"commits":2736,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":261770,"space":1027139,"commits":5105,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":26918,"nospace":60250,"commits":2981,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15296,"nospace":170757,"commits":3734,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":76320,"bothspace":15653,"nospace":24315,"commits":3226,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":69300,"nospace":17273,"commits":2724,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":159759,"double":84991,"commits":4418,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-19","convention":{"lang":"js","comma":{"first":11735,"last":213842,"commits":4633,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":478733,"space":1626541,"commits":8322,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":43268,"nospace":93994,"commits":4847,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20027,"nospace":270860,"commits":6123,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":142791,"bothspace":23610,"nospace":36251,"commits":5263,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":120382,"nospace":20851,"commits":4631,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":271712,"double":152291,"commits":7256,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-18","convention":{"lang":"js","comma":{"first":9198,"last":209878,"commits":4643,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":373530,"space":1532631,"commits":8509,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":38140,"nospace":93817,"commits":5022,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15120,"nospace":257554,"commits":6275,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":128630,"bothspace":22380,"nospace":34828,"commits":5134,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":103070,"nospace":20596,"commits":4596,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":241778,"double":172431,"commits":7370,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-17","convention":{"lang":"js","comma":{"first":11093,"last":142520,"commits":2867,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":217794,"space":1050009,"commits":5330,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":29434,"nospace":72046,"commits":3160,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10822,"nospace":187226,"commits":3985,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":87937,"bothspace":10475,"nospace":24599,"commits":3342,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":71465,"nospace":14307,"commits":2983,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":170024,"double":130955,"commits":4582,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-16","convention":{"lang":"js","comma":{"first":3020,"last":125756,"commits":2569,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":260703,"space":1040732,"commits":4886,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":26214,"nospace":75805,"commits":2712,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":11513,"nospace":181631,"commits":3518,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":85766,"bothspace":13992,"nospace":20953,"commits":2965,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":68227,"nospace":15234,"commits":2652,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":190441,"double":107225,"commits":4246,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-15","convention":{"lang":"js","comma":{"first":12142,"last":254146,"commits":5132,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":516241,"space":2115713,"commits":9389,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":61338,"nospace":122534,"commits":5631,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28185,"nospace":355115,"commits":7042,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":163391,"bothspace":28529,"nospace":55541,"commits":6046,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":147713,"nospace":31361,"commits":5374,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":303048,"double":236832,"commits":8143,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-14","convention":{"lang":"js","comma":{"first":9941,"last":309586,"commits":5143,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":697998,"space":2402918,"commits":9788,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75697,"nospace":136439,"commits":5845,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":32592,"nospace":412860,"commits":7317,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":185880,"bothspace":41790,"nospace":60742,"commits":6361,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":169952,"nospace":39739,"commits":5488,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":329471,"double":255606,"commits":8523,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-13","convention":{"lang":"js","comma":{"first":7329,"last":111105,"commits":2678,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":236102,"space":1014972,"commits":4749,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":28774,"nospace":65708,"commits":2908,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":12353,"nospace":179103,"commits":3580,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":83384,"bothspace":12872,"nospace":21685,"commits":3176,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":71697,"nospace":14285,"commits":2716,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":156988,"double":93204,"commits":4202,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-12","convention":{"lang":"js","comma":{"first":12053,"last":229216,"commits":3914,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":342640,"space":1448390,"commits":7205,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":39084,"nospace":79837,"commits":4182,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16596,"nospace":222572,"commits":5240,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":117932,"bothspace":15594,"nospace":38897,"commits":4452,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":86144,"nospace":23210,"commits":3849,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":209891,"double":198172,"commits":6079,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-11","convention":{"lang":"js","comma":{"first":7782,"last":133679,"commits":2877,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":310615,"space":1129463,"commits":5506,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":26489,"nospace":66766,"commits":3146,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":12530,"nospace":187386,"commits":4065,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":77253,"bothspace":16062,"nospace":25625,"commits":3354,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":74039,"nospace":21492,"commits":3069,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":175005,"double":116841,"commits":4677,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-10","convention":{"lang":"js","comma":{"first":13105,"last":149539,"commits":3398,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":311882,"space":1281295,"commits":6231,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":33692,"nospace":66332,"commits":3624,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13739,"nospace":213158,"commits":4617,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":99360,"bothspace":18758,"nospace":30720,"commits":3956,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":89213,"nospace":23821,"commits":3505,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":201022,"double":120830,"commits":5294,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-09","convention":{"lang":"js","comma":{"first":5370,"last":179750,"commits":3806,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":278167,"space":1174429,"commits":7281,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":28421,"nospace":70157,"commits":4238,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18502,"nospace":186251,"commits":5343,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":94601,"bothspace":18131,"nospace":27029,"commits":4407,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":79667,"nospace":15889,"commits":3995,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":173881,"double":165149,"commits":6171,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-08","convention":{"lang":"js","comma":{"first":6728,"last":327476,"commits":5027,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":567482,"space":2091279,"commits":9077,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56913,"nospace":113167,"commits":5431,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22414,"nospace":332633,"commits":6751,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":155916,"bothspace":32772,"nospace":55434,"commits":5877,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":134491,"nospace":32583,"commits":5216,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":296889,"double":276687,"commits":7845,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-07","convention":{"lang":"js","comma":{"first":13018,"last":252294,"commits":5051,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":476780,"space":2065452,"commits":9322,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":60809,"nospace":116274,"commits":5525,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26509,"nospace":350240,"commits":6882,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":154167,"bothspace":38892,"nospace":53233,"commits":6151,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":141838,"nospace":36605,"commits":5244,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":299644,"double":220380,"commits":8160,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-04","convention":{"lang":"js","comma":{"first":1435,"last":24197,"commits":682,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":36491,"space":227436,"commits":1287,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":5023,"nospace":12957,"commits":741,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":4174,"nospace":33645,"commits":938,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":17889,"bothspace":2512,"nospace":5851,"commits":771,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":15523,"nospace":3308,"commits":680,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":34532,"double":21249,"commits":1128,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-03","convention":{"lang":"js","comma":{"first":4057,"last":89304,"commits":2318,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":186207,"space":755843,"commits":4275,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":17855,"nospace":50050,"commits":2447,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":7172,"nospace":126332,"commits":3100,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":61435,"bothspace":10126,"nospace":18959,"commits":2697,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":49033,"nospace":10593,"commits":2271,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":108212,"double":73420,"commits":3642,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-02","convention":{"lang":"js","comma":{"first":5395,"last":172072,"commits":2887,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":243242,"space":1104118,"commits":5240,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":23877,"nospace":63723,"commits":3042,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10882,"nospace":175006,"commits":3807,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":82010,"bothspace":14708,"nospace":29624,"commits":3237,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":72968,"nospace":14605,"commits":2859,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":158179,"double":168550,"commits":4522,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-06-01","convention":{"lang":"js","comma":{"first":11050,"last":286301,"commits":5440,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":671877,"space":2307402,"commits":10077,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64567,"nospace":134825,"commits":6097,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22657,"nospace":404653,"commits":7503,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":183803,"bothspace":30209,"nospace":63930,"commits":6574,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":161909,"nospace":41049,"commits":5700,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":328820,"double":264537,"commits":8810,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-31","convention":{"lang":"js","comma":{"first":16244,"last":332741,"commits":5485,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":527854,"space":2369727,"commits":10295,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74011,"nospace":131755,"commits":6329,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25469,"nospace":403318,"commits":7813,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":170387,"bothspace":35139,"nospace":73426,"commits":6554,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":161851,"nospace":38161,"commits":5693,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":354534,"double":315625,"commits":9046,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-30","convention":{"lang":"js","comma":{"first":6435,"last":199034,"commits":3322,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":406903,"space":1415226,"commits":6020,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":29480,"nospace":88254,"commits":3646,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17291,"nospace":231456,"commits":4550,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":120863,"bothspace":31051,"nospace":35787,"commits":3932,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":95667,"nospace":21620,"commits":3365,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":215738,"double":155903,"commits":5333,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-29","convention":{"lang":"js","comma":{"first":15415,"last":299221,"commits":4483,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":666423,"space":2051444,"commits":8058,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":49706,"nospace":112392,"commits":4748,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19384,"nospace":328271,"commits":5966,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":161290,"bothspace":27681,"nospace":46207,"commits":5094,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124610,"nospace":41037,"commits":4504,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":307997,"double":248841,"commits":6913,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-28","convention":{"lang":"js","comma":{"first":4746,"last":136657,"commits":3761,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":293440,"space":1083769,"commits":7033,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":28137,"nospace":62314,"commits":4019,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13160,"nospace":179306,"commits":5107,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":86568,"bothspace":16550,"nospace":27363,"commits":4374,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":71485,"nospace":18319,"commits":3808,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":164929,"double":116378,"commits":5994,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-27","convention":{"lang":"js","comma":{"first":5581,"last":120007,"commits":3032,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":245893,"space":1009206,"commits":5629,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":27400,"nospace":64545,"commits":3264,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15983,"nospace":170668,"commits":4139,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":75818,"bothspace":10685,"nospace":25165,"commits":3465,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":69901,"nospace":15118,"commits":3116,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":162401,"double":116498,"commits":4821,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-26","convention":{"lang":"js","comma":{"first":5756,"last":190587,"commits":3954,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":398643,"space":1405009,"commits":7248,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":46390,"nospace":84597,"commits":4274,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21583,"nospace":247873,"commits":5361,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":120661,"bothspace":24288,"nospace":36595,"commits":4657,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":100751,"nospace":24761,"commits":4057,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":227722,"double":160181,"commits":6218,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-25","convention":{"lang":"js","comma":{"first":20916,"last":373459,"commits":5282,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":707216,"space":2867847,"commits":9655,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":78741,"nospace":163787,"commits":5763,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34669,"nospace":479094,"commits":7236,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":212909,"bothspace":40954,"nospace":67753,"commits":6258,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":192128,"nospace":49282,"commits":5571,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":415066,"double":320265,"commits":8446,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-24","convention":{"lang":"js","comma":{"first":10506,"last":438601,"commits":5268,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":657619,"space":2548426,"commits":10014,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":80020,"nospace":130636,"commits":6034,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28912,"nospace":406683,"commits":7561,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":212295,"bothspace":42812,"nospace":61442,"commits":6460,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":160882,"nospace":43559,"commits":5641,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":354361,"double":409786,"commits":8696,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-23","convention":{"lang":"js","comma":{"first":7142,"last":186874,"commits":3258,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":337962,"space":1515019,"commits":6303,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":43199,"nospace":90547,"commits":3754,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20806,"nospace":250252,"commits":4719,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":113072,"bothspace":23033,"nospace":33571,"commits":4010,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":101411,"nospace":24359,"commits":3521,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":231332,"double":156585,"commits":5394,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-22","convention":{"lang":"js","comma":{"first":4639,"last":176607,"commits":3709,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":367195,"space":1403604,"commits":6860,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":36162,"nospace":81541,"commits":3853,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":14344,"nospace":231648,"commits":4982,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":105729,"bothspace":20796,"nospace":30235,"commits":4169,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":96616,"nospace":16091,"commits":3839,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":198185,"double":176636,"commits":5798,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-21","convention":{"lang":"js","comma":{"first":3600,"last":104400,"commits":2824,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":227559,"space":892541,"commits":5292,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":31513,"nospace":54558,"commits":3050,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":11774,"nospace":162694,"commits":3855,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":69000,"bothspace":11843,"nospace":26102,"commits":3247,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":65137,"nospace":14873,"commits":2907,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":137602,"double":94496,"commits":4433,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-20","convention":{"lang":"js","comma":{"first":4819,"last":68590,"commits":1875,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":143482,"space":669032,"commits":3450,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":22682,"nospace":41086,"commits":1995,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":9515,"nospace":116065,"commits":2515,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":50999,"bothspace":7631,"nospace":14721,"commits":2181,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":45128,"nospace":10224,"commits":1897,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":98527,"double":71451,"commits":2970,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-19","convention":{"lang":"js","comma":{"first":9945,"last":160325,"commits":3723,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":288880,"space":1450391,"commits":6737,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":43931,"nospace":81565,"commits":3834,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13798,"nospace":260482,"commits":4931,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":109816,"bothspace":20789,"nospace":35301,"commits":4140,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":108242,"nospace":22641,"commits":3764,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":215120,"double":154542,"commits":5881,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-18","convention":{"lang":"js","comma":{"first":13936,"last":293210,"commits":5670,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":888532,"space":2466043,"commits":10494,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64675,"nospace":154370,"commits":6296,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":38064,"nospace":425175,"commits":7994,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":200753,"bothspace":33558,"nospace":61836,"commits":6828,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":164354,"nospace":59346,"commits":6104,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":379677,"double":244121,"commits":9217,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-17","convention":{"lang":"js","comma":{"first":17233,"last":333878,"commits":5517,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":672102,"space":2728524,"commits":10178,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":79264,"nospace":152990,"commits":6274,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":35440,"nospace":456000,"commits":7741,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":206992,"bothspace":51371,"nospace":66258,"commits":6738,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":188259,"nospace":47784,"commits":5855,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":378787,"double":291388,"commits":8948,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-16","convention":{"lang":"js","comma":{"first":11535,"last":173183,"commits":3339,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":379550,"space":1448575,"commits":6461,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":39684,"nospace":90521,"commits":3593,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19140,"nospace":245153,"commits":4706,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":114142,"bothspace":29186,"nospace":34486,"commits":4096,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":93961,"nospace":26777,"commits":3648,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":225211,"double":164521,"commits":5627,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-15","convention":{"lang":"js","comma":{"first":10166,"last":167879,"commits":2964,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":332000,"space":1235327,"commits":5552,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":37140,"nospace":64163,"commits":3123,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15169,"nospace":199084,"commits":3968,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":91376,"bothspace":17849,"nospace":26210,"commits":3482,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":82478,"nospace":15259,"commits":3040,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":179095,"double":139855,"commits":4752,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-14","convention":{"lang":"js","comma":{"first":6364,"last":125118,"commits":2712,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":319556,"space":997807,"commits":4987,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":27721,"nospace":58858,"commits":2903,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17467,"nospace":162777,"commits":3707,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":79335,"bothspace":19557,"nospace":24095,"commits":3187,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":69748,"nospace":13682,"commits":2886,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":134156,"double":114966,"commits":4243,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-13","convention":{"lang":"js","comma":{"first":12123,"last":217003,"commits":4260,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":348221,"space":1846939,"commits":7679,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":46301,"nospace":107594,"commits":4365,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":35586,"nospace":284597,"commits":5637,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":121843,"bothspace":21914,"nospace":40970,"commits":4960,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124933,"nospace":24787,"commits":4324,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":237872,"double":235591,"commits":6762,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-12","convention":{"lang":"js","comma":{"first":6504,"last":109376,"commits":2425,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":190240,"space":927924,"commits":4518,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":27451,"nospace":55804,"commits":2702,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":7484,"nospace":162318,"commits":3341,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":66670,"bothspace":12201,"nospace":21691,"commits":2877,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":64487,"nospace":14098,"commits":2499,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":142060,"double":97712,"commits":3975,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-11","convention":{"lang":"js","comma":{"first":15386,"last":244995,"commits":5446,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":570979,"space":1954661,"commits":9972,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":62210,"nospace":108309,"commits":5925,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30159,"nospace":327149,"commits":7407,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":156436,"bothspace":21762,"nospace":43993,"commits":6469,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":139760,"nospace":26698,"commits":5692,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":312047,"double":206864,"commits":8723,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-10","convention":{"lang":"js","comma":{"first":15840,"last":275665,"commits":5271,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":633545,"space":2276695,"commits":9786,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68953,"nospace":122908,"commits":5797,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30068,"nospace":373687,"commits":7291,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":173078,"bothspace":38957,"nospace":55119,"commits":6350,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":154640,"nospace":36896,"commits":5623,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":346608,"double":212877,"commits":8517,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-09","convention":{"lang":"js","comma":{"first":9154,"last":194135,"commits":3863,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":402205,"space":1494607,"commits":7005,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":40532,"nospace":90784,"commits":4135,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18229,"nospace":252803,"commits":5210,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":124547,"bothspace":21554,"nospace":39152,"commits":4501,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":107208,"nospace":22972,"commits":3950,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":219741,"double":177377,"commits":6143,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-08","convention":{"lang":"js","comma":{"first":4368,"last":147815,"commits":3019,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":391232,"space":1241585,"commits":5768,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":25435,"nospace":81589,"commits":3316,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13747,"nospace":207145,"commits":4237,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":102463,"bothspace":20481,"nospace":28584,"commits":3646,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":80843,"nospace":23013,"commits":3285,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":206504,"double":112564,"commits":5036,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-07","convention":{"lang":"js","comma":{"first":6021,"last":134540,"commits":3480,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":361988,"space":1200308,"commits":6632,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":32487,"nospace":74369,"commits":3870,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17462,"nospace":203609,"commits":4992,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":93438,"bothspace":18776,"nospace":28018,"commits":4218,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":81586,"nospace":20147,"commits":3808,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":203717,"double":117096,"commits":5669,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-06","convention":{"lang":"js","comma":{"first":2216,"last":108150,"commits":2040,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":187114,"space":683419,"commits":3939,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":17860,"nospace":36718,"commits":2332,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":7354,"nospace":109950,"commits":2929,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":51302,"bothspace":9386,"nospace":15541,"commits":2432,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":44923,"nospace":11068,"commits":2239,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":99091,"double":92881,"commits":3375,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-05","convention":{"lang":"js","comma":{"first":5508,"last":139439,"commits":2983,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":285852,"space":1007699,"commits":5656,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":29335,"nospace":61368,"commits":3262,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10526,"nospace":171443,"commits":4072,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":86433,"bothspace":20592,"nospace":24518,"commits":3548,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":68329,"nospace":15047,"commits":3057,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":154525,"double":121191,"commits":4886,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-04","convention":{"lang":"js","comma":{"first":14188,"last":303520,"commits":5279,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":612565,"space":2382298,"commits":9958,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68053,"nospace":135607,"commits":5960,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27808,"nospace":407055,"commits":7497,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":178421,"bothspace":42028,"nospace":56273,"commits":6397,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":171823,"nospace":38679,"commits":5714,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":337439,"double":260374,"commits":8646,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-03","convention":{"lang":"js","comma":{"first":15342,"last":282357,"commits":5111,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":647900,"space":2186578,"commits":9768,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56665,"nospace":122848,"commits":5693,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31350,"nospace":361626,"commits":7243,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":175756,"bothspace":31605,"nospace":62748,"commits":6237,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":156684,"nospace":35900,"commits":5437,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":305986,"double":241966,"commits":8450,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-02","convention":{"lang":"js","comma":{"first":11415,"last":160550,"commits":3493,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":304468,"space":1345372,"commits":6460,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":36778,"nospace":76766,"commits":3969,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13334,"nospace":233206,"commits":4914,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":113907,"bothspace":19166,"nospace":28917,"commits":4133,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":99337,"nospace":21276,"commits":3681,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":197907,"double":138871,"commits":5565,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-05-01","convention":{"lang":"js","comma":{"first":10844,"last":249645,"commits":4728,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":477290,"space":1804557,"commits":8962,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53706,"nospace":98155,"commits":5147,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16754,"nospace":300161,"commits":6608,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":144095,"bothspace":26387,"nospace":45491,"commits":5728,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":118994,"nospace":28808,"commits":5078,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":269158,"double":208013,"commits":7741,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-30","convention":{"lang":"js","comma":{"first":6036,"last":179566,"commits":3522,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":332441,"space":1496689,"commits":6591,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":42221,"nospace":78496,"commits":3747,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":11603,"nospace":250217,"commits":4773,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":136085,"bothspace":20546,"nospace":31811,"commits":4199,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":101153,"nospace":24243,"commits":3587,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":226078,"double":131880,"commits":5656,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-29","convention":{"lang":"js","comma":{"first":6668,"last":193618,"commits":3785,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":432859,"space":1447362,"commits":7048,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":36323,"nospace":91746,"commits":4039,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":29518,"nospace":231616,"commits":5168,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":124279,"bothspace":19385,"nospace":33871,"commits":4401,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":97974,"nospace":23548,"commits":3945,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":219648,"double":151548,"commits":6057,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-28","convention":{"lang":"js","comma":{"first":10512,"last":193701,"commits":3800,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":430122,"space":1486349,"commits":7113,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":37796,"nospace":88709,"commits":4155,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22544,"nospace":243650,"commits":5309,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":119664,"bothspace":19201,"nospace":39746,"commits":4511,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":98896,"nospace":21208,"commits":4067,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":231631,"double":157635,"commits":6202,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-27","convention":{"lang":"js","comma":{"first":8047,"last":298715,"commits":4872,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":521359,"space":2009011,"commits":9016,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58613,"nospace":126934,"commits":5411,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24855,"nospace":349334,"commits":6769,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":165671,"bothspace":25776,"nospace":58516,"commits":5805,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":134474,"nospace":35214,"commits":5082,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":278230,"double":263461,"commits":7856,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-26","convention":{"lang":"js","comma":{"first":17104,"last":266306,"commits":5424,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":585586,"space":2188741,"commits":9830,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":70464,"nospace":121848,"commits":5975,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22957,"nospace":384006,"commits":7474,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":172537,"bothspace":40461,"nospace":53490,"commits":6476,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":154507,"nospace":41164,"commits":5651,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":330193,"double":216573,"commits":8614,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-25","convention":{"lang":"js","comma":{"first":9406,"last":208754,"commits":3574,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":364166,"space":1510918,"commits":6447,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":35614,"nospace":88299,"commits":3835,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16657,"nospace":248466,"commits":4891,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":113790,"bothspace":29427,"nospace":32304,"commits":4140,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":98429,"nospace":24240,"commits":3690,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":248801,"double":166510,"commits":5639,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-24","convention":{"lang":"js","comma":{"first":7108,"last":152480,"commits":4536,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":267392,"space":1289511,"commits":8227,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":34697,"nospace":80085,"commits":4825,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":11483,"nospace":229831,"commits":6105,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":96100,"bothspace":24218,"nospace":31081,"commits":5203,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":85784,"nospace":25140,"commits":4603,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":199949,"double":123504,"commits":6949,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-23","convention":{"lang":"js","comma":{"first":4965,"last":148525,"commits":3035,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":323511,"space":1055386,"commits":5778,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":22398,"nospace":65601,"commits":3303,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13755,"nospace":172690,"commits":4268,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":82122,"bothspace":35329,"nospace":22757,"commits":3616,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":70197,"nospace":17263,"commits":3173,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":187711,"double":114746,"commits":4922,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-22","convention":{"lang":"js","comma":{"first":8106,"last":161815,"commits":3932,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":282826,"space":1405104,"commits":7167,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":42973,"nospace":78195,"commits":4160,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8796,"nospace":248346,"commits":5262,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":112056,"bothspace":25360,"nospace":34276,"commits":4548,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":98907,"nospace":19395,"commits":4062,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":215024,"double":126545,"commits":6017,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-21","convention":{"lang":"js","comma":{"first":10130,"last":245983,"commits":4397,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":432814,"space":1848580,"commits":8022,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":45180,"nospace":122492,"commits":4706,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23338,"nospace":312727,"commits":5915,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":152328,"bothspace":37694,"nospace":48528,"commits":5053,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124093,"nospace":27485,"commits":4466,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":277960,"double":202545,"commits":6956,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-20","convention":{"lang":"js","comma":{"first":19356,"last":325158,"commits":5497,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":625315,"space":2532193,"commits":10058,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":70362,"nospace":151769,"commits":6157,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22775,"nospace":435827,"commits":7556,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":191739,"bothspace":36263,"nospace":64788,"commits":6562,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":164775,"nospace":49272,"commits":5598,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":368185,"double":312661,"commits":8776,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-19","convention":{"lang":"js","comma":{"first":20520,"last":395427,"commits":5555,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":673518,"space":2819952,"commits":10251,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":78388,"nospace":161090,"commits":6330,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31778,"nospace":467498,"commits":7829,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":202465,"bothspace":75927,"nospace":74292,"commits":6725,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":184207,"nospace":49351,"commits":5873,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":427005,"double":351183,"commits":9041,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-18","convention":{"lang":"js","comma":{"first":15426,"last":269912,"commits":4548,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":537947,"space":1970989,"commits":8254,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":61784,"nospace":103645,"commits":4965,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":35066,"nospace":301055,"commits":6180,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":161951,"bothspace":25967,"nospace":47668,"commits":5226,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124869,"nospace":28027,"commits":4653,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":293239,"double":236352,"commits":7112,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-17","convention":{"lang":"js","comma":{"first":8287,"last":152802,"commits":2630,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":289376,"space":1165917,"commits":4761,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":25437,"nospace":68691,"commits":2802,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":9227,"nospace":196053,"commits":3530,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":99242,"bothspace":12992,"nospace":30338,"commits":3027,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":77965,"nospace":21927,"commits":2644,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":166233,"double":137002,"commits":4080,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-16","convention":{"lang":"js","comma":{"first":6915,"last":123173,"commits":3172,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":220980,"space":1040779,"commits":5876,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":28939,"nospace":61106,"commits":3292,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":7931,"nospace":182806,"commits":4270,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":86383,"bothspace":15145,"nospace":22937,"commits":3677,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":75087,"nospace":15339,"commits":3269,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":160586,"double":104157,"commits":4996,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-15","convention":{"lang":"js","comma":{"first":4745,"last":186426,"commits":2806,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":400374,"space":1237528,"commits":5247,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":33014,"nospace":68254,"commits":3069,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":12432,"nospace":198645,"commits":3886,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":103120,"bothspace":15971,"nospace":32977,"commits":3300,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":73497,"nospace":29910,"commits":2968,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":177259,"double":148661,"commits":4472,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-14","convention":{"lang":"js","comma":{"first":8675,"last":170964,"commits":3069,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":255636,"space":1172299,"commits":5849,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":34188,"nospace":75328,"commits":3368,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8759,"nospace":207497,"commits":4233,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":85787,"bothspace":12064,"nospace":29237,"commits":3604,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":77968,"nospace":19743,"commits":3274,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":181889,"double":161658,"commits":4915,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-13","convention":{"lang":"js","comma":{"first":20213,"last":280126,"commits":4927,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":650936,"space":2235094,"commits":9330,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":65669,"nospace":124699,"commits":5721,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":40472,"nospace":375430,"commits":7146,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":162185,"bothspace":38517,"nospace":48818,"commits":6053,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":163555,"nospace":37144,"commits":5456,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":305722,"double":289115,"commits":8111,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-12","convention":{"lang":"js","comma":{"first":15124,"last":320318,"commits":5176,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":654185,"space":2444419,"commits":9603,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":71464,"nospace":130185,"commits":5819,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28733,"nospace":405823,"commits":7285,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":179971,"bothspace":52121,"nospace":57502,"commits":6221,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":170910,"nospace":39674,"commits":5470,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":384514,"double":247341,"commits":8449,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-11","convention":{"lang":"js","comma":{"first":7221,"last":203501,"commits":4163,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":429547,"space":1443035,"commits":7653,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":37642,"nospace":88953,"commits":4454,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16161,"nospace":242447,"commits":5687,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":114746,"bothspace":21863,"nospace":32676,"commits":4823,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":94874,"nospace":24599,"commits":4314,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":234009,"double":149708,"commits":6547,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-10","convention":{"lang":"js","comma":{"first":10253,"last":221945,"commits":4791,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":333313,"space":1613397,"commits":8659,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":36027,"nospace":103814,"commits":5108,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":14296,"nospace":267732,"commits":6405,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":129896,"bothspace":34139,"nospace":42774,"commits":5550,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":96433,"nospace":30403,"commits":4864,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":273811,"double":161815,"commits":7361,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-09","convention":{"lang":"js","comma":{"first":10558,"last":145407,"commits":2808,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":228368,"space":1102225,"commits":5436,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":35217,"nospace":64173,"commits":3027,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":7566,"nospace":196321,"commits":3896,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":98431,"bothspace":15009,"nospace":26665,"commits":3339,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":76181,"nospace":16202,"commits":3036,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":166949,"double":124604,"commits":4573,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-08","convention":{"lang":"js","comma":{"first":13374,"last":228879,"commits":3331,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":295012,"space":1323247,"commits":6188,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":38890,"nospace":63863,"commits":3633,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":11668,"nospace":201143,"commits":4634,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":100022,"bothspace":19189,"nospace":28097,"commits":3990,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":81851,"nospace":15548,"commits":3610,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":183206,"double":219418,"commits":5314,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-07","convention":{"lang":"js","comma":{"first":11857,"last":176122,"commits":3561,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":310928,"space":1480799,"commits":6505,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":39194,"nospace":88585,"commits":3770,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":14240,"nospace":253306,"commits":4788,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":109155,"bothspace":22891,"nospace":32253,"commits":4034,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":106068,"nospace":20591,"commits":3710,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":231397,"double":152451,"commits":5522,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-06","convention":{"lang":"js","comma":{"first":17252,"last":288603,"commits":5220,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":573711,"space":2236983,"commits":9663,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":71866,"nospace":129538,"commits":5980,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":29865,"nospace":384825,"commits":7361,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":190574,"bothspace":33038,"nospace":52910,"commits":6276,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":154497,"nospace":36054,"commits":5550,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":331884,"double":237660,"commits":8397,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-05","convention":{"lang":"js","comma":{"first":18282,"last":324684,"commits":5239,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":605050,"space":2301644,"commits":9944,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68784,"nospace":127166,"commits":6166,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28253,"nospace":380276,"commits":7617,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":171084,"bothspace":29373,"nospace":57856,"commits":6479,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":152074,"nospace":39301,"commits":5613,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":330375,"double":304088,"commits":8688,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-04","convention":{"lang":"js","comma":{"first":6589,"last":184011,"commits":3770,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":335831,"space":1384469,"commits":7010,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":36995,"nospace":79714,"commits":3993,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15156,"nospace":235153,"commits":5137,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":112775,"bothspace":24588,"nospace":35043,"commits":4399,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":94683,"nospace":24053,"commits":3905,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":215162,"double":150736,"commits":6040,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-03","convention":{"lang":"js","comma":{"first":6444,"last":207842,"commits":3547,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":339083,"space":1168776,"commits":6444,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":27695,"nospace":62536,"commits":3781,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8236,"nospace":184776,"commits":4815,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":86501,"bothspace":15045,"nospace":30301,"commits":4036,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":72763,"nospace":19545,"commits":3726,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":165909,"double":187149,"commits":5506,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-02","convention":{"lang":"js","comma":{"first":6277,"last":172135,"commits":3763,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":400677,"space":1327176,"commits":7150,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":28680,"nospace":73169,"commits":4096,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":12665,"nospace":224273,"commits":5273,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":98130,"bothspace":25169,"nospace":33473,"commits":4419,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":96029,"nospace":22198,"commits":4110,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":205331,"double":134648,"commits":6085,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-04-01","convention":{"lang":"js","comma":{"first":6413,"last":224096,"commits":2964,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":347321,"space":1275815,"commits":5530,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":30109,"nospace":72492,"commits":3305,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16843,"nospace":197198,"commits":4129,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":99015,"bothspace":17597,"nospace":29549,"commits":3382,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":82115,"nospace":16732,"commits":3166,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":175836,"double":202604,"commits":4735,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-31","convention":{"lang":"js","comma":{"first":9528,"last":136145,"commits":3095,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":396564,"space":1267539,"commits":5629,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":30145,"nospace":77094,"commits":3266,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16364,"nospace":212962,"commits":4210,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":95343,"bothspace":28654,"nospace":38599,"commits":3564,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":86886,"nospace":20155,"commits":3362,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":225262,"double":109690,"commits":4825,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-30","convention":{"lang":"js","comma":{"first":18254,"last":329567,"commits":5852,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":617883,"space":2456593,"commits":10892,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63848,"nospace":143570,"commits":6606,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23534,"nospace":414748,"commits":8218,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":171655,"bothspace":45261,"nospace":63951,"commits":6883,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":162063,"nospace":45323,"commits":6363,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":378934,"double":291834,"commits":9442,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-29","convention":{"lang":"js","comma":{"first":18447,"last":307814,"commits":5253,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":680084,"space":2556872,"commits":9720,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75305,"nospace":145084,"commits":5924,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":40102,"nospace":429660,"commits":7381,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":199498,"bothspace":38723,"nospace":65047,"commits":6379,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":181645,"nospace":43303,"commits":5770,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":374016,"double":272682,"commits":8490,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-28","convention":{"lang":"js","comma":{"first":9641,"last":291245,"commits":3865,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":511261,"space":1892100,"commits":7245,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":40753,"nospace":107863,"commits":4237,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20699,"nospace":307656,"commits":5373,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":136104,"bothspace":34563,"nospace":52383,"commits":4523,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124320,"nospace":33797,"commits":4101,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":266450,"double":279723,"commits":6187,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-27","convention":{"lang":"js","comma":{"first":3420,"last":120671,"commits":2898,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":289963,"space":1022476,"commits":5595,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":20631,"nospace":65895,"commits":3212,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15886,"nospace":166237,"commits":4153,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":82149,"bothspace":15627,"nospace":29387,"commits":3399,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":64642,"nospace":20353,"commits":3267,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":159620,"double":116740,"commits":4710,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-26","convention":{"lang":"js","comma":{"first":13825,"last":274680,"commits":5987,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":487445,"space":2302048,"commits":11080,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":52622,"nospace":139619,"commits":6482,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20331,"nospace":377287,"commits":8232,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":173919,"bothspace":33023,"nospace":58296,"commits":6874,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":146730,"nospace":39470,"commits":6367,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":358718,"double":242466,"commits":9490,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-25","convention":{"lang":"js","comma":{"first":7272,"last":232648,"commits":6759,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":490109,"space":1986459,"commits":12366,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":47636,"nospace":132033,"commits":7303,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20419,"nospace":338004,"commits":9088,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":163844,"bothspace":26965,"nospace":54227,"commits":7774,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126586,"nospace":35120,"commits":6990,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":327713,"double":199138,"commits":10630,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-24","convention":{"lang":"js","comma":{"first":15837,"last":289807,"commits":6515,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":495717,"space":2064360,"commits":11611,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56807,"nospace":113690,"commits":6820,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20052,"nospace":321159,"commits":8595,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":196970,"bothspace":38422,"nospace":57239,"commits":7271,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126463,"nospace":29512,"commits":6699,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":323123,"double":225291,"commits":10007,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-23","convention":{"lang":"js","comma":{"first":18442,"last":380627,"commits":6158,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":572795,"space":2656973,"commits":11367,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":77333,"nospace":154186,"commits":6925,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28054,"nospace":461233,"commits":8551,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":186989,"bothspace":54797,"nospace":69510,"commits":7177,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":188083,"nospace":45100,"commits":6488,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":398927,"double":351225,"commits":9922,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-22","convention":{"lang":"js","comma":{"first":20110,"last":312623,"commits":5811,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":576960,"space":2383482,"commits":10880,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67060,"nospace":137003,"commits":6390,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25275,"nospace":406980,"commits":8090,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":178436,"bothspace":31126,"nospace":60889,"commits":6928,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":162036,"nospace":42081,"commits":6125,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":335131,"double":278522,"commits":9535,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-21","convention":{"lang":"js","comma":{"first":37559,"last":382793,"commits":6452,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":627882,"space":2753156,"commits":11955,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":91237,"nospace":143028,"commits":6974,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34694,"nospace":447317,"commits":8837,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":206936,"bothspace":39715,"nospace":68401,"commits":7482,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":180646,"nospace":39070,"commits":6846,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":362492,"double":388623,"commits":10271,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-20","convention":{"lang":"js","comma":{"first":21413,"last":283431,"commits":5944,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":564329,"space":2350568,"commits":10986,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":65020,"nospace":144710,"commits":6537,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25296,"nospace":406954,"commits":8198,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":197350,"bothspace":38867,"nospace":60281,"commits":7048,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":160159,"nospace":36295,"commits":6455,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":336282,"double":248133,"commits":9542,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-19","convention":{"lang":"js","comma":{"first":12021,"last":259335,"commits":5829,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":502628,"space":1981898,"commits":11047,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":55419,"nospace":116389,"commits":6385,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23207,"nospace":326859,"commits":8192,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":146698,"bothspace":39179,"nospace":48907,"commits":6854,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":127636,"nospace":32603,"commits":6371,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":308359,"double":205706,"commits":9505,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-18","convention":{"lang":"js","comma":{"first":12862,"last":241761,"commits":6363,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":494305,"space":2066918,"commits":11852,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64115,"nospace":119307,"commits":6684,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22965,"nospace":348374,"commits":8519,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":159263,"bothspace":33828,"nospace":51712,"commits":7404,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":133375,"nospace":35447,"commits":6651,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":307233,"double":205453,"commits":9972,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-17","convention":{"lang":"js","comma":{"first":11312,"last":317884,"commits":5730,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":518260,"space":2312800,"commits":10697,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64671,"nospace":133486,"commits":6028,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24559,"nospace":375464,"commits":7679,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":187991,"bothspace":41436,"nospace":54725,"commits":6709,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":146037,"nospace":33743,"commits":5905,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":335922,"double":277664,"commits":9045,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-16","convention":{"lang":"js","comma":{"first":23872,"last":479475,"commits":6304,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":884916,"space":3171457,"commits":11548,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":86607,"nospace":181629,"commits":6975,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":39311,"nospace":508257,"commits":8548,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":223128,"bothspace":53514,"nospace":81438,"commits":7439,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":202185,"nospace":51345,"commits":6466,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":473354,"double":447748,"commits":10115,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-15","convention":{"lang":"js","comma":{"first":21684,"last":352534,"commits":5873,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":614090,"space":2712011,"commits":11263,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":80256,"nospace":151811,"commits":6695,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36780,"nospace":456913,"commits":8220,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":215082,"bothspace":36350,"nospace":66217,"commits":7094,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":187378,"nospace":49581,"commits":6117,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":391790,"double":309313,"commits":9879,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-14","convention":{"lang":"js","comma":{"first":14167,"last":242792,"commits":4964,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":517422,"space":2063339,"commits":9564,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":55509,"nospace":120293,"commits":5451,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25642,"nospace":335148,"commits":6882,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":158968,"bothspace":39630,"nospace":50802,"commits":5896,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":127490,"nospace":40306,"commits":5443,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":308641,"double":192582,"commits":8089,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-13","convention":{"lang":"js","comma":{"first":12362,"last":280025,"commits":5931,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":444100,"space":2032235,"commits":11445,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59662,"nospace":111421,"commits":6265,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22258,"nospace":329937,"commits":8127,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":158426,"bothspace":52932,"nospace":50879,"commits":6888,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":129215,"nospace":35247,"commits":6219,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":290561,"double":239934,"commits":9563,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-12","convention":{"lang":"js","comma":{"first":13717,"last":286287,"commits":5784,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":507788,"space":2074741,"commits":10856,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63632,"nospace":111965,"commits":6323,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22229,"nospace":342054,"commits":7960,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":171272,"bothspace":33492,"nospace":54605,"commits":6783,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":135721,"nospace":35025,"commits":6052,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":324124,"double":242124,"commits":9224,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-11","convention":{"lang":"js","comma":{"first":16447,"last":325258,"commits":6386,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":474114,"space":2309258,"commits":11654,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":60073,"nospace":137576,"commits":6794,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24483,"nospace":393514,"commits":8510,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":189713,"bothspace":36252,"nospace":57747,"commits":7252,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":151392,"nospace":40143,"commits":6451,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":375583,"double":255462,"commits":9979,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-10","convention":{"lang":"js","comma":{"first":16741,"last":331490,"commits":6302,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":538132,"space":2266514,"commits":11656,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56508,"nospace":141886,"commits":6827,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26967,"nospace":370634,"commits":8584,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":199548,"bothspace":35091,"nospace":64065,"commits":7266,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":139625,"nospace":39661,"commits":6627,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":343181,"double":293087,"commits":9961,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-09","convention":{"lang":"js","comma":{"first":25039,"last":326502,"commits":5781,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":623229,"space":2686458,"commits":10833,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75154,"nospace":161266,"commits":6808,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34100,"nospace":455495,"commits":8370,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":221672,"bothspace":36441,"nospace":66887,"commits":7272,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":181082,"nospace":46725,"commits":6503,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":403985,"double":284655,"commits":9735,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-08","convention":{"lang":"js","comma":{"first":28352,"last":377929,"commits":5685,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":686379,"space":2661954,"commits":11016,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":77428,"nospace":160849,"commits":7527,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31162,"nospace":445574,"commits":9036,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194336,"bothspace":47285,"nospace":70668,"commits":7748,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":168552,"nospace":49244,"commits":7001,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":395868,"double":347589,"commits":10399,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-07","convention":{"lang":"js","comma":{"first":19598,"last":315321,"commits":6245,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":519875,"space":2430032,"commits":11639,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67224,"nospace":131963,"commits":7208,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25960,"nospace":390174,"commits":8890,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":214553,"bothspace":40374,"nospace":59058,"commits":7582,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":155260,"nospace":34912,"commits":6852,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":342337,"double":296014,"commits":10278,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-06","convention":{"lang":"js","comma":{"first":14186,"last":257699,"commits":5683,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":463019,"space":1901485,"commits":10548,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":48324,"nospace":117509,"commits":6174,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19134,"nospace":314542,"commits":7838,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":171636,"bothspace":34601,"nospace":48286,"commits":6678,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":122179,"nospace":31994,"commits":6003,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":296087,"double":204364,"commits":8957,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-05","convention":{"lang":"js","comma":{"first":12876,"last":259951,"commits":6027,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":477332,"space":1938335,"commits":11354,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58323,"nospace":115723,"commits":6544,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22455,"nospace":337469,"commits":8349,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":156310,"bothspace":25058,"nospace":45766,"commits":7017,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":137490,"nospace":31777,"commits":6412,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":303496,"double":235324,"commits":9552,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-04","convention":{"lang":"js","comma":{"first":14698,"last":302208,"commits":5554,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":554987,"space":2170997,"commits":10327,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58603,"nospace":123550,"commits":6033,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34093,"nospace":350203,"commits":7617,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":176132,"bothspace":23990,"nospace":53438,"commits":6573,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":145288,"nospace":36815,"commits":5926,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":290888,"double":278744,"commits":8828,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-03","convention":{"lang":"js","comma":{"first":8946,"last":129680,"commits":2719,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":310975,"space":1059253,"commits":4975,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":23933,"nospace":60757,"commits":2861,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8612,"nospace":180975,"commits":3716,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":78569,"bothspace":15238,"nospace":26440,"commits":3122,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":70861,"nospace":22776,"commits":2877,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":150795,"double":119073,"commits":4284,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-03-01","convention":{"lang":"js","comma":{"first":909,"last":12127,"commits":266,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":21569,"space":64105,"commits":487,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":2477,"nospace":4305,"commits":258,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":834,"nospace":11620,"commits":336,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":8691,"bothspace":1127,"nospace":3097,"commits":284,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":3609,"nospace":1875,"commits":264,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":9949,"double":11619,"commits":403,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-28","convention":{"lang":"js","comma":{"first":1413,"last":35784,"commits":253,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":48751,"space":168913,"commits":468,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":3717,"nospace":11268,"commits":267,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":1900,"nospace":25904,"commits":345,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":18408,"bothspace":1319,"nospace":6640,"commits":287,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":9456,"nospace":2620,"commits":277,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":18376,"double":28579,"commits":394,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-26","convention":{"lang":"js","comma":{"first":632,"last":13046,"commits":310,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":17442,"space":118281,"commits":582,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":3862,"nospace":5705,"commits":356,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":866,"nospace":19170,"commits":448,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":9452,"bothspace":1665,"nospace":3249,"commits":371,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":7039,"nospace":2294,"commits":327,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":13159,"double":14468,"commits":491,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-24","convention":{"lang":"js","comma":{"first":932,"last":16988,"commits":256,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":21209,"space":89068,"commits":481,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":2069,"nospace":4947,"commits":260,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":250,"nospace":13540,"commits":344,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":7113,"bothspace":750,"nospace":1968,"commits":305,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":4990,"nospace":1319,"commits":276,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":22787,"double":5268,"commits":406,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-22","convention":{"lang":"js","comma":{"first":490,"last":37396,"commits":272,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":30540,"space":160224,"commits":496,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":3094,"nospace":8792,"commits":329,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":1703,"nospace":23633,"commits":405,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":12706,"bothspace":4628,"nospace":3999,"commits":352,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":10516,"nospace":1750,"commits":288,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":22852,"double":38995,"commits":453,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-21","convention":{"lang":"js","comma":{"first":92,"last":10191,"commits":273,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":24282,"space":85466,"commits":545,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":2135,"nospace":5460,"commits":302,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":1443,"nospace":14826,"commits":407,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":6769,"bothspace":775,"nospace":2426,"commits":326,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":6148,"nospace":1853,"commits":332,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":11075,"double":8319,"commits":445,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-20","convention":{"lang":"js","comma":{"first":1025,"last":12506,"commits":334,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":32649,"space":98405,"commits":536,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":4075,"nospace":5255,"commits":335,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":1728,"nospace":15493,"commits":385,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":7831,"bothspace":1731,"nospace":3518,"commits":376,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":6109,"nospace":1237,"commits":304,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":17255,"double":8910,"commits":464,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-18","convention":{"lang":"js","comma":{"first":415,"last":7004,"commits":268,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":21064,"space":49404,"commits":493,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":878,"nospace":3616,"commits":269,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":483,"nospace":7767,"commits":357,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":3756,"bothspace":717,"nospace":3274,"commits":296,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":2417,"nospace":1427,"commits":275,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":7338,"double":7136,"commits":415,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-17","convention":{"lang":"js","comma":{"first":438,"last":3046,"commits":219,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":8764,"space":38706,"commits":409,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":1013,"nospace":2691,"commits":201,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":148,"nospace":7061,"commits":278,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":2856,"bothspace":527,"nospace":1294,"commits":236,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":2674,"nospace":596,"commits":216,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":5822,"double":3040,"commits":336,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-16","convention":{"lang":"js","comma":{"first":1746,"last":24106,"commits":281,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":29547,"space":165096,"commits":511,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":4600,"nospace":8811,"commits":330,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":768,"nospace":25824,"commits":384,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":10238,"bothspace":1549,"nospace":6761,"commits":324,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":10210,"nospace":1722,"commits":269,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":17000,"double":16935,"commits":468,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-14","convention":{"lang":"js","comma":{"first":240,"last":10441,"commits":348,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":21685,"space":85800,"commits":618,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":1806,"nospace":6801,"commits":363,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":389,"nospace":15677,"commits":469,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":7622,"bothspace":1453,"nospace":2756,"commits":391,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":4758,"nospace":2054,"commits":347,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":14576,"double":7852,"commits":529,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-13","convention":{"lang":"js","comma":{"first":4953,"last":110696,"commits":3135,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":238746,"space":980446,"commits":5687,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":27536,"nospace":57461,"commits":3343,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":8692,"nospace":168312,"commits":4254,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":75643,"bothspace":18714,"nospace":23231,"commits":3704,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":63635,"nospace":18292,"commits":3326,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":163580,"double":79173,"commits":4971,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-12","convention":{"lang":"js","comma":{"first":6206,"last":216530,"commits":5915,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":457299,"space":1730319,"commits":11031,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":42415,"nospace":109045,"commits":6441,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":13332,"nospace":291810,"commits":8153,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":140365,"bothspace":24741,"nospace":48343,"commits":6899,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":108456,"nospace":33645,"commits":6248,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":250007,"double":183018,"commits":9593,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-11","convention":{"lang":"js","comma":{"first":9059,"last":352240,"commits":6125,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":545103,"space":2220250,"commits":11072,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59230,"nospace":134432,"commits":6411,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19969,"nospace":361674,"commits":8168,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":195242,"bothspace":35471,"nospace":64015,"commits":6884,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":133012,"nospace":39608,"commits":6264,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":366542,"double":296010,"commits":9524,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-10","convention":{"lang":"js","comma":{"first":14006,"last":312855,"commits":5921,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":495740,"space":2106225,"commits":10793,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69424,"nospace":124416,"commits":6249,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20024,"nospace":357326,"commits":7860,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":189178,"bothspace":32323,"nospace":64175,"commits":6954,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126008,"nospace":39787,"commits":6135,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":316738,"double":248571,"commits":9238,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-09","convention":{"lang":"js","comma":{"first":22226,"last":432936,"commits":6291,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":644799,"space":2783001,"commits":11152,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82352,"nospace":167178,"commits":7103,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":43273,"nospace":451296,"commits":8522,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":224165,"bothspace":39883,"nospace":65833,"commits":7477,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":172402,"nospace":54195,"commits":6308,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":395341,"double":382594,"commits":9849,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-08","convention":{"lang":"js","comma":{"first":16513,"last":389341,"commits":5897,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":722972,"space":2728320,"commits":10672,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82611,"nospace":147952,"commits":6639,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":37901,"nospace":440567,"commits":8091,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":188710,"bothspace":52336,"nospace":68862,"commits":7011,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":176651,"nospace":48380,"commits":6084,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":380704,"double":340862,"commits":9374,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-07","convention":{"lang":"js","comma":{"first":10340,"last":290998,"commits":5804,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":506252,"space":2118637,"commits":11010,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":51300,"nospace":132879,"commits":6278,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":32584,"nospace":348934,"commits":7908,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":185482,"bothspace":34575,"nospace":49383,"commits":6795,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":133985,"nospace":44027,"commits":5995,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":319179,"double":220705,"commits":9348,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-06","convention":{"lang":"js","comma":{"first":17639,"last":298235,"commits":5745,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":546006,"space":2044097,"commits":10645,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":54841,"nospace":115580,"commits":6097,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19430,"nospace":322961,"commits":7709,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":155380,"bothspace":38996,"nospace":60214,"commits":6701,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":123341,"nospace":35834,"commits":5931,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":327252,"double":258641,"commits":9037,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-05","convention":{"lang":"js","comma":{"first":12679,"last":352612,"commits":5820,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":575930,"space":2167660,"commits":10871,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59121,"nospace":122093,"commits":6139,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28416,"nospace":343340,"commits":7882,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":155301,"bothspace":40456,"nospace":55935,"commits":6775,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":141820,"nospace":32465,"commits":6093,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":322644,"double":330205,"commits":9229,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-04","convention":{"lang":"js","comma":{"first":14832,"last":355868,"commits":6103,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":593409,"space":2508542,"commits":11252,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67737,"nospace":153841,"commits":6540,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33533,"nospace":403880,"commits":8294,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":199425,"bothspace":42048,"nospace":63727,"commits":7147,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":155111,"nospace":42619,"commits":6279,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":379353,"double":284217,"commits":9641,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-03","convention":{"lang":"js","comma":{"first":17841,"last":270357,"commits":5585,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":534185,"space":2150453,"commits":10617,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69917,"nospace":127120,"commits":6063,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20826,"nospace":364018,"commits":7687,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":172720,"bothspace":30926,"nospace":52987,"commits":6620,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":132538,"nospace":39366,"commits":5966,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":349353,"double":246051,"commits":9086,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-02","convention":{"lang":"js","comma":{"first":18891,"last":301080,"commits":5753,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":568432,"space":2372111,"commits":10440,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":70804,"nospace":139452,"commits":6518,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20306,"nospace":407460,"commits":7920,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":181446,"bothspace":39202,"nospace":67171,"commits":6922,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":155491,"nospace":42783,"commits":5978,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":370108,"double":240836,"commits":9314,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-02-01","convention":{"lang":"js","comma":{"first":27559,"last":362182,"commits":5487,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":576634,"space":2776473,"commits":9836,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":88112,"nospace":162030,"commits":6251,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26793,"nospace":476555,"commits":7609,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":191886,"bothspace":45226,"nospace":73314,"commits":6544,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":185470,"nospace":45590,"commits":5893,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":399766,"double":338699,"commits":8744,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-31","convention":{"lang":"js","comma":{"first":15650,"last":286775,"commits":5173,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":438804,"space":2003842,"commits":9740,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":55521,"nospace":111528,"commits":5472,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20403,"nospace":340746,"commits":7050,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":156144,"bothspace":27983,"nospace":48426,"commits":6002,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":138334,"nospace":36173,"commits":5394,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":304582,"double":254566,"commits":8403,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-30","convention":{"lang":"js","comma":{"first":14623,"last":300606,"commits":5714,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":488308,"space":2136857,"commits":10775,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74878,"nospace":112163,"commits":6207,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19897,"nospace":358753,"commits":8036,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":156669,"bothspace":23555,"nospace":53361,"commits":6802,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":143192,"nospace":34417,"commits":6223,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":321159,"double":279837,"commits":9359,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-29","convention":{"lang":"js","comma":{"first":14985,"last":415698,"commits":5863,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":658331,"space":2381218,"commits":10830,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69248,"nospace":140610,"commits":6324,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24219,"nospace":388307,"commits":8035,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":170288,"bothspace":42816,"nospace":64595,"commits":6856,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":144546,"nospace":42340,"commits":6144,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":328270,"double":418696,"commits":9295,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-28","convention":{"lang":"js","comma":{"first":13665,"last":294244,"commits":5208,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":518503,"space":1994128,"commits":9634,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":61381,"nospace":117128,"commits":5547,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23292,"nospace":315509,"commits":7077,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":142742,"bothspace":25250,"nospace":59950,"commits":6075,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":115484,"nospace":34499,"commits":5501,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":294943,"double":257784,"commits":8286,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-27","convention":{"lang":"js","comma":{"first":11914,"last":256711,"commits":6202,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":403490,"space":1924014,"commits":11498,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":52772,"nospace":114478,"commits":6559,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15814,"nospace":332995,"commits":8433,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":149662,"bothspace":31094,"nospace":48759,"commits":7246,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126090,"nospace":35159,"commits":6506,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":332816,"double":209081,"commits":9931,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-26","convention":{"lang":"js","comma":{"first":27453,"last":425792,"commits":5876,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":641158,"space":2702253,"commits":10887,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":81339,"nospace":153138,"commits":6541,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26743,"nospace":453229,"commits":8178,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":191324,"bothspace":42494,"nospace":88160,"commits":7014,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":167646,"nospace":51520,"commits":6266,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":411994,"double":402234,"commits":9622,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-25","convention":{"lang":"js","comma":{"first":18244,"last":344674,"commits":5830,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":649624,"space":2627205,"commits":10518,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67640,"nospace":165855,"commits":6449,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34305,"nospace":445315,"commits":7983,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194268,"bothspace":42038,"nospace":73284,"commits":6817,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":178685,"nospace":45548,"commits":6095,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":390145,"double":288783,"commits":9365,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-24","convention":{"lang":"js","comma":{"first":25730,"last":295003,"commits":5658,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":576319,"space":2405810,"commits":10547,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":70771,"nospace":138713,"commits":6019,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28827,"nospace":395881,"commits":7716,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":179610,"bothspace":37882,"nospace":59572,"commits":6717,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":149095,"nospace":43666,"commits":5952,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":360828,"double":259469,"commits":9151,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-23","convention":{"lang":"js","comma":{"first":16078,"last":282740,"commits":6122,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":572041,"space":2114226,"commits":11226,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59805,"nospace":129230,"commits":6468,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18722,"nospace":366913,"commits":8281,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":159540,"bothspace":38170,"nospace":62431,"commits":7137,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":139525,"nospace":40327,"commits":6378,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":303775,"double":263410,"commits":9667,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-22","convention":{"lang":"js","comma":{"first":21989,"last":268273,"commits":6320,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":479426,"space":2191593,"commits":11469,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59452,"nospace":134269,"commits":6605,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18047,"nospace":387697,"commits":8378,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":177070,"bothspace":46463,"nospace":59242,"commits":7329,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":154874,"nospace":35801,"commits":6430,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":340034,"double":238631,"commits":9933,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-21","convention":{"lang":"js","comma":{"first":14269,"last":389067,"commits":6614,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":728191,"space":2505019,"commits":12448,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":62697,"nospace":144272,"commits":7147,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26689,"nospace":396276,"commits":9126,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194767,"bothspace":40036,"nospace":66774,"commits":7823,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":157930,"nospace":43019,"commits":7056,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":387180,"double":317674,"commits":10515,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-20","convention":{"lang":"js","comma":{"first":12378,"last":292952,"commits":5791,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":513212,"space":1925320,"commits":10532,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":48636,"nospace":116039,"commits":6166,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23803,"nospace":312547,"commits":7855,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":146842,"bothspace":26914,"nospace":56386,"commits":6735,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":119718,"nospace":35391,"commits":6007,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":292136,"double":243510,"commits":9219,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-19","convention":{"lang":"js","comma":{"first":21165,"last":360909,"commits":5572,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":638154,"space":2505335,"commits":10503,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":84350,"nospace":138618,"commits":6547,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27658,"nospace":418721,"commits":7864,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":192228,"bothspace":42510,"nospace":73504,"commits":6886,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":155410,"nospace":52390,"commits":5968,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":383049,"double":296384,"commits":9193,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-18","convention":{"lang":"js","comma":{"first":25111,"last":326455,"commits":5985,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":674265,"space":2708745,"commits":11133,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":83154,"nospace":172217,"commits":6997,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34988,"nospace":482213,"commits":8504,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":214765,"bothspace":47566,"nospace":75473,"commits":7258,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":190243,"nospace":53746,"commits":6360,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":434211,"double":274871,"commits":9894,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-17","convention":{"lang":"js","comma":{"first":14948,"last":267582,"commits":6008,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":525662,"space":2083448,"commits":11241,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66725,"nospace":124186,"commits":6715,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19673,"nospace":356579,"commits":8399,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":174631,"bothspace":33446,"nospace":60833,"commits":7079,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":128039,"nospace":39249,"commits":6403,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":307047,"double":230817,"commits":9651,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-16","convention":{"lang":"js","comma":{"first":19843,"last":280669,"commits":6051,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":630883,"space":2197796,"commits":11023,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63818,"nospace":126657,"commits":6658,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20264,"nospace":373313,"commits":8227,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":182902,"bothspace":32739,"nospace":68899,"commits":7054,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":147940,"nospace":35840,"commits":6365,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":359505,"double":219981,"commits":9481,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-15","convention":{"lang":"js","comma":{"first":17112,"last":301223,"commits":6134,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":699210,"space":2279667,"commits":11175,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67370,"nospace":130766,"commits":6577,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20076,"nospace":384551,"commits":8309,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":199119,"bothspace":37009,"nospace":59592,"commits":7050,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":143455,"nospace":41896,"commits":6353,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":312531,"double":271644,"commits":9524,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-14","convention":{"lang":"js","comma":{"first":22441,"last":358658,"commits":6629,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":634263,"space":2465330,"commits":12045,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66304,"nospace":146357,"commits":7073,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20206,"nospace":418361,"commits":8875,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":195870,"bothspace":36737,"nospace":64052,"commits":7664,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":159213,"nospace":44494,"commits":6792,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":393442,"double":318517,"commits":10202,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-13","convention":{"lang":"js","comma":{"first":15155,"last":282606,"commits":6005,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":512043,"space":2236897,"commits":11200,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58744,"nospace":133921,"commits":6398,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26238,"nospace":373436,"commits":8202,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":167157,"bothspace":40054,"nospace":57125,"commits":7068,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":146631,"nospace":40762,"commits":6325,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":347804,"double":231047,"commits":9568,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-12","convention":{"lang":"js","comma":{"first":26683,"last":406727,"commits":6256,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":645759,"space":2746030,"commits":11197,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75332,"nospace":163914,"commits":6947,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27150,"nospace":459103,"commits":8428,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":197698,"bothspace":42945,"nospace":70926,"commits":7578,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":178989,"nospace":46432,"commits":6469,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":406781,"double":368504,"commits":9842,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-11","convention":{"lang":"js","comma":{"first":25688,"last":351508,"commits":5659,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":711610,"space":2774878,"commits":10265,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":80112,"nospace":179465,"commits":6472,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26853,"nospace":488371,"commits":7816,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":205370,"bothspace":55174,"nospace":82603,"commits":6875,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":175105,"nospace":61273,"commits":5827,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":440102,"double":319576,"commits":9188,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-10","convention":{"lang":"js","comma":{"first":14372,"last":286775,"commits":5730,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":512667,"space":2267589,"commits":10405,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59662,"nospace":138264,"commits":6009,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18413,"nospace":380695,"commits":7716,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":172754,"bothspace":32595,"nospace":58820,"commits":6680,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":139815,"nospace":41979,"commits":5971,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":330226,"double":246667,"commits":8977,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-09","convention":{"lang":"js","comma":{"first":19457,"last":366358,"commits":5812,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":543868,"space":2550057,"commits":10494,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69380,"nospace":145496,"commits":6131,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22535,"nospace":412935,"commits":7699,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":195061,"bothspace":42350,"nospace":67243,"commits":6817,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":158802,"nospace":39752,"commits":5924,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":380833,"double":331999,"commits":9063,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-08","convention":{"lang":"js","comma":{"first":16699,"last":436642,"commits":6267,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":727265,"space":2677950,"commits":11650,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68990,"nospace":150228,"commits":6556,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25728,"nospace":424918,"commits":8424,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":205445,"bothspace":74803,"nospace":75003,"commits":7225,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":166772,"nospace":38761,"commits":6595,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":403016,"double":378045,"commits":9962,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-07","convention":{"lang":"js","comma":{"first":19407,"last":267308,"commits":5933,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":522949,"space":2038297,"commits":10952,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":65861,"nospace":121671,"commits":6480,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18674,"nospace":349567,"commits":8192,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":168110,"bothspace":32826,"nospace":58316,"commits":6948,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":130454,"nospace":35818,"commits":6311,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":314472,"double":213027,"commits":9407,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-06","convention":{"lang":"js","comma":{"first":22285,"last":341537,"commits":5960,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":517666,"space":2449100,"commits":11060,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75544,"nospace":133171,"commits":6566,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15801,"nospace":420477,"commits":8270,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":185310,"bothspace":35801,"nospace":64329,"commits":7013,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":157509,"nospace":42406,"commits":6302,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":382979,"double":275451,"commits":9414,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-05","convention":{"lang":"js","comma":{"first":29046,"last":469568,"commits":6180,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":683298,"space":3260640,"commits":11331,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":99547,"nospace":193178,"commits":7138,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27470,"nospace":555743,"commits":8692,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":263138,"bothspace":46607,"nospace":89048,"commits":7498,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":209204,"nospace":57291,"commits":6648,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":505348,"double":395307,"commits":9983,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-04","convention":{"lang":"js","comma":{"first":25147,"last":414765,"commits":5833,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":636625,"space":2852180,"commits":10799,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":92051,"nospace":166402,"commits":6770,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26107,"nospace":473619,"commits":8254,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":198037,"bothspace":59878,"nospace":78097,"commits":7033,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":180936,"nospace":42592,"commits":6268,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":423990,"double":378399,"commits":9478,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-03","convention":{"lang":"js","comma":{"first":19138,"last":333239,"commits":5481,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":608403,"space":2327388,"commits":9895,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":73226,"nospace":137684,"commits":6059,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16113,"nospace":403672,"commits":7460,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":177912,"bothspace":36927,"nospace":61417,"commits":6452,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":150417,"nospace":41442,"commits":5539,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":379115,"double":267543,"commits":8591,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-02","convention":{"lang":"js","comma":{"first":22542,"last":297580,"commits":5420,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":592365,"space":2526372,"commits":10028,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":71717,"nospace":151496,"commits":5907,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20725,"nospace":446735,"commits":7432,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":202141,"bothspace":33720,"nospace":61882,"commits":6534,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":176349,"nospace":45026,"commits":5623,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":371714,"double":262236,"commits":8739,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2014-01-01","convention":{"lang":"js","comma":{"first":31416,"last":420136,"commits":5891,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":645143,"space":3321036,"commits":10512,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":105661,"nospace":202019,"commits":6621,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25487,"nospace":598311,"commits":7995,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":255573,"bothspace":50342,"nospace":83074,"commits":7051,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":240121,"nospace":52106,"commits":6012,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":467589,"double":401855,"commits":9325,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-31","convention":{"lang":"js","comma":{"first":31018,"last":337288,"commits":5656,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":558721,"space":2962045,"commits":10606,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":100575,"nospace":177228,"commits":6649,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26203,"nospace":538297,"commits":8087,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":202394,"bothspace":51964,"nospace":77948,"commits":6950,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":195902,"nospace":64972,"commits":6226,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":434514,"double":315965,"commits":9315,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-30","convention":{"lang":"js","comma":{"first":24200,"last":323295,"commits":5720,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":608368,"space":2415148,"commits":10696,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67764,"nospace":144808,"commits":6597,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25256,"nospace":399483,"commits":8034,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":209668,"bothspace":34659,"nospace":67855,"commits":6971,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":151498,"nospace":44064,"commits":6120,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":362606,"double":267223,"commits":9418,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-29","convention":{"lang":"js","comma":{"first":27083,"last":372134,"commits":6283,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":588916,"space":2880203,"commits":11382,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":87602,"nospace":169146,"commits":7067,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28367,"nospace":500842,"commits":8634,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":222012,"bothspace":52713,"nospace":77909,"commits":7675,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":195057,"nospace":53812,"commits":6531,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":416180,"double":333912,"commits":10085,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-28","convention":{"lang":"js","comma":{"first":39461,"last":478978,"commits":5457,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":843433,"space":3426808,"commits":10127,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":105388,"nospace":195353,"commits":6449,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36202,"nospace":575552,"commits":7698,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":223342,"bothspace":75355,"nospace":90529,"commits":6777,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":224527,"nospace":60032,"commits":5760,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":526688,"double":423655,"commits":9037,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-27","convention":{"lang":"js","comma":{"first":27178,"last":332807,"commits":5230,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":617150,"space":2657329,"commits":9421,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":76525,"nospace":158604,"commits":5809,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26518,"nospace":456215,"commits":7110,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194944,"bothspace":36888,"nospace":72195,"commits":6236,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":176797,"nospace":47115,"commits":5415,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":410831,"double":300748,"commits":8398,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-26","convention":{"lang":"js","comma":{"first":35094,"last":352818,"commits":6198,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":812196,"space":3110610,"commits":11414,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":95478,"nospace":176593,"commits":7081,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27265,"nospace":528179,"commits":8671,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":219106,"bothspace":58155,"nospace":85458,"commits":7505,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":204160,"nospace":54634,"commits":6481,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":464692,"double":332231,"commits":10203,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-25","convention":{"lang":"js","comma":{"first":33372,"last":416156,"commits":6373,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":819022,"space":3250487,"commits":11557,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":93825,"nospace":195249,"commits":7282,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":35564,"nospace":552351,"commits":8758,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":255624,"bothspace":55652,"nospace":97393,"commits":7845,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":210462,"nospace":63201,"commits":6590,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":531988,"double":336097,"commits":10322,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-24","convention":{"lang":"js","comma":{"first":34887,"last":407940,"commits":5995,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":643160,"space":3449834,"commits":10953,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":106733,"nospace":203420,"commits":6748,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25431,"nospace":603127,"commits":8272,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":249084,"bothspace":47500,"nospace":87256,"commits":7232,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":232683,"nospace":61895,"commits":6335,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":517334,"double":352038,"commits":9710,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-23","convention":{"lang":"js","comma":{"first":20222,"last":400760,"commits":6473,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":689060,"space":2798596,"commits":11651,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":80445,"nospace":164765,"commits":6914,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":32147,"nospace":469564,"commits":8552,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":207729,"bothspace":52201,"nospace":85124,"commits":7622,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":186257,"nospace":48371,"commits":6540,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":409940,"double":310954,"commits":10295,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-22","convention":{"lang":"js","comma":{"first":27583,"last":394299,"commits":6016,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":663727,"space":3065894,"commits":11028,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":101673,"nospace":165071,"commits":6925,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26430,"nospace":522434,"commits":8423,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":234883,"bothspace":44977,"nospace":83496,"commits":7313,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":200897,"nospace":53755,"commits":6319,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":493528,"double":331735,"commits":9762,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-21","convention":{"lang":"js","comma":{"first":37845,"last":435203,"commits":5774,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":606447,"space":3205944,"commits":10614,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":98127,"nospace":190168,"commits":6637,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22427,"nospace":552310,"commits":8178,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":222162,"bothspace":51479,"nospace":92149,"commits":6931,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":205727,"nospace":59235,"commits":6163,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":464779,"double":412334,"commits":9496,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-20","convention":{"lang":"js","comma":{"first":24125,"last":340959,"commits":5985,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":563829,"space":2683866,"commits":10882,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":77824,"nospace":155211,"commits":6509,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16931,"nospace":466146,"commits":8272,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":210583,"bothspace":40181,"nospace":72873,"commits":6939,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":180191,"nospace":44646,"commits":6504,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":391957,"double":318534,"commits":9430,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-19","convention":{"lang":"js","comma":{"first":17929,"last":288065,"commits":6448,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":517546,"space":2501304,"commits":12215,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74984,"nospace":137042,"commits":7112,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27675,"nospace":418294,"commits":9088,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":209439,"bothspace":33976,"nospace":60435,"commits":7700,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":160392,"nospace":44255,"commits":7007,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":380734,"double":235156,"commits":10431,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-18","convention":{"lang":"js","comma":{"first":14232,"last":247600,"commits":5072,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":461966,"space":1848979,"commits":9199,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":49167,"nospace":105165,"commits":5445,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19832,"nospace":303391,"commits":6838,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":150536,"bothspace":34701,"nospace":48075,"commits":5901,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":116733,"nospace":34534,"commits":5291,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":288751,"double":201468,"commits":7866,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-17","convention":{"lang":"js","comma":{"first":14917,"last":281154,"commits":5913,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":412660,"space":1911442,"commits":10797,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":47418,"nospace":116573,"commits":6262,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19516,"nospace":313936,"commits":7942,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":161896,"bothspace":25887,"nospace":53021,"commits":6851,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":115041,"nospace":35791,"commits":6107,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":288601,"double":269908,"commits":9233,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-16","convention":{"lang":"js","comma":{"first":16743,"last":266673,"commits":6057,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":512078,"space":2125570,"commits":11193,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58583,"nospace":120482,"commits":6368,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19033,"nospace":358962,"commits":8197,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":166323,"bothspace":39547,"nospace":56903,"commits":7047,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":142517,"nospace":36999,"commits":6347,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":306447,"double":226792,"commits":9486,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-15","convention":{"lang":"js","comma":{"first":28125,"last":341938,"commits":5830,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":704609,"space":2622067,"commits":10704,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74753,"nospace":162765,"commits":6658,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31114,"nospace":453853,"commits":8178,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":213789,"bothspace":38702,"nospace":75440,"commits":7101,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":173283,"nospace":55332,"commits":6202,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":390343,"double":295040,"commits":9444,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-14","convention":{"lang":"js","comma":{"first":40955,"last":344306,"commits":5980,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":585869,"space":2767514,"commits":11162,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82923,"nospace":165749,"commits":6933,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24225,"nospace":478092,"commits":8416,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":201923,"bothspace":38535,"nospace":78920,"commits":7255,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":180688,"nospace":53564,"commits":6281,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":423262,"double":316947,"commits":9812,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-13","convention":{"lang":"js","comma":{"first":17749,"last":215275,"commits":4950,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":457675,"space":1839569,"commits":9104,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":48709,"nospace":115735,"commits":5342,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21057,"nospace":309994,"commits":6677,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":150310,"bothspace":30518,"nospace":46168,"commits":5794,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":119109,"nospace":33997,"commits":5132,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":269346,"double":170690,"commits":7826,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-12","convention":{"lang":"js","comma":{"first":20328,"last":356896,"commits":5390,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":488298,"space":2438217,"commits":9825,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":62905,"nospace":138579,"commits":5788,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24833,"nospace":387129,"commits":7306,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":198116,"bothspace":33234,"nospace":57989,"commits":6377,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":149238,"nospace":40243,"commits":5756,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":350116,"double":320848,"commits":8555,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-11","convention":{"lang":"js","comma":{"first":17700,"last":301565,"commits":5755,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":529648,"space":2521879,"commits":10439,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":61915,"nospace":158348,"commits":6239,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30398,"nospace":413437,"commits":7771,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":193947,"bothspace":49572,"nospace":61432,"commits":6720,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":158485,"nospace":39880,"commits":6077,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":398600,"double":255708,"commits":8992,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-10","convention":{"lang":"js","comma":{"first":17647,"last":303652,"commits":5763,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":543165,"space":2218889,"commits":10499,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58477,"nospace":139657,"commits":6218,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31207,"nospace":359822,"commits":7762,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":183012,"bothspace":33016,"nospace":72224,"commits":6693,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":135937,"nospace":39324,"commits":6072,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":331038,"double":280079,"commits":9127,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-09","convention":{"lang":"js","comma":{"first":15248,"last":336502,"commits":6117,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":525398,"space":2417982,"commits":11531,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58655,"nospace":148769,"commits":6746,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31094,"nospace":392197,"commits":8535,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":183517,"bothspace":31263,"nospace":63538,"commits":7174,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":144967,"nospace":51049,"commits":6612,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":355784,"double":272871,"commits":9771,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-08","convention":{"lang":"js","comma":{"first":28723,"last":355855,"commits":5954,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":776874,"space":2803520,"commits":11132,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":79049,"nospace":167058,"commits":6793,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27929,"nospace":464302,"commits":8453,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":213765,"bothspace":41591,"nospace":75575,"commits":7155,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":173957,"nospace":50467,"commits":6433,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":436003,"double":320991,"commits":9873,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-07","convention":{"lang":"js","comma":{"first":26244,"last":289924,"commits":4930,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":430840,"space":2235244,"commits":9481,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":77566,"nospace":126577,"commits":5784,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15193,"nospace":395795,"commits":7154,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":162799,"bothspace":31299,"nospace":60824,"commits":6055,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":147993,"nospace":39855,"commits":5366,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":344597,"double":253800,"commits":8368,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-06","convention":{"lang":"js","comma":{"first":17589,"last":265709,"commits":5202,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":445758,"space":2104368,"commits":9658,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":55186,"nospace":126845,"commits":5635,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18899,"nospace":355654,"commits":7073,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":170305,"bothspace":24793,"nospace":54152,"commits":6107,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":132538,"nospace":44090,"commits":5456,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":318854,"double":220944,"commits":8352,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-05","convention":{"lang":"js","comma":{"first":15702,"last":318620,"commits":5264,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":514767,"space":2356326,"commits":9858,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53920,"nospace":151960,"commits":5621,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21747,"nospace":385932,"commits":7235,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":196013,"bothspace":43932,"nospace":56482,"commits":6161,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":136618,"nospace":45686,"commits":5615,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":376521,"double":231548,"commits":8539,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-04","convention":{"lang":"js","comma":{"first":17341,"last":278273,"commits":6110,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":510209,"space":2336699,"commits":11170,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":65139,"nospace":138844,"commits":6508,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25747,"nospace":392344,"commits":8244,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194709,"bothspace":41828,"nospace":61519,"commits":7012,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":149143,"nospace":46056,"commits":6417,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":348004,"double":234531,"commits":9623,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-03","convention":{"lang":"js","comma":{"first":18073,"last":319097,"commits":5376,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":497219,"space":2111007,"commits":9817,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":48562,"nospace":126032,"commits":5725,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19675,"nospace":336513,"commits":7191,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":174242,"bothspace":38975,"nospace":62351,"commits":6159,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":129808,"nospace":35398,"commits":5539,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":285213,"double":301894,"commits":8467,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-02","convention":{"lang":"js","comma":{"first":15081,"last":275107,"commits":5010,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":448715,"space":1973405,"commits":9405,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":52262,"nospace":120866,"commits":5476,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20814,"nospace":348114,"commits":6960,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":142378,"bothspace":32954,"nospace":57209,"commits":5913,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":134850,"nospace":34356,"commits":5321,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":300955,"double":252293,"commits":8040,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-12-01","convention":{"lang":"js","comma":{"first":30159,"last":381138,"commits":6375,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":682164,"space":3003931,"commits":11368,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82971,"nospace":173594,"commits":7201,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30201,"nospace":503464,"commits":8750,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":222483,"bothspace":48601,"nospace":82074,"commits":7626,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":197519,"nospace":52899,"commits":6603,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":497620,"double":334003,"commits":10156,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-30","convention":{"lang":"js","comma":{"first":31189,"last":315500,"commits":5669,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":618982,"space":2812764,"commits":10552,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":90901,"nospace":169006,"commits":6593,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24755,"nospace":498484,"commits":8100,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194631,"bothspace":46872,"nospace":77975,"commits":6959,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":189348,"nospace":51649,"commits":6087,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":418797,"double":302859,"commits":9274,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-29","convention":{"lang":"js","comma":{"first":27039,"last":316475,"commits":6126,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":632480,"space":2660757,"commits":11270,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":76571,"nospace":159079,"commits":6855,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33388,"nospace":450902,"commits":8447,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":192086,"bothspace":32159,"nospace":69249,"commits":7345,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":175977,"nospace":51478,"commits":6366,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":410874,"double":271626,"commits":9854,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-28","convention":{"lang":"js","comma":{"first":19063,"last":254267,"commits":5409,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":556525,"space":2236614,"commits":9958,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67534,"nospace":126300,"commits":6028,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25961,"nospace":373772,"commits":7435,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":164880,"bothspace":45139,"nospace":53234,"commits":6421,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":147878,"nospace":35752,"commits":5663,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":380042,"double":231587,"commits":8712,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-27","convention":{"lang":"js","comma":{"first":28094,"last":330290,"commits":5831,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":558981,"space":2622891,"commits":10482,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74848,"nospace":158378,"commits":6190,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25765,"nospace":450489,"commits":7701,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":193522,"bothspace":70562,"nospace":68811,"commits":6693,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":169127,"nospace":53967,"commits":5922,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":388898,"double":308649,"commits":9067,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-26","convention":{"lang":"js","comma":{"first":22325,"last":362565,"commits":6127,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":617867,"space":2676889,"commits":11289,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":65846,"nospace":170123,"commits":6617,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27044,"nospace":443766,"commits":8256,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":223944,"bothspace":54308,"nospace":73634,"commits":7015,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":164554,"nospace":50692,"commits":6294,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":424082,"double":293343,"commits":9776,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-25","convention":{"lang":"js","comma":{"first":18810,"last":302721,"commits":5804,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":520010,"space":2497751,"commits":10735,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64510,"nospace":159289,"commits":6346,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23130,"nospace":453033,"commits":8051,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":212110,"bothspace":29338,"nospace":61048,"commits":6726,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":186348,"nospace":38965,"commits":6286,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":359973,"double":262684,"commits":9335,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-24","convention":{"lang":"js","comma":{"first":34188,"last":416626,"commits":5876,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":641932,"space":3013529,"commits":10727,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":83953,"nospace":185154,"commits":6765,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31242,"nospace":504414,"commits":8170,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":208124,"bothspace":36975,"nospace":80046,"commits":6931,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":190882,"nospace":51693,"commits":6236,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":432892,"double":413374,"commits":9575,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-23","convention":{"lang":"js","comma":{"first":41020,"last":307095,"commits":5743,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":573177,"space":2716093,"commits":10679,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":81274,"nospace":171810,"commits":6691,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27984,"nospace":472852,"commits":8133,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":193693,"bothspace":41420,"nospace":71455,"commits":6875,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":176458,"nospace":52030,"commits":6090,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":415040,"double":272932,"commits":9485,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-22","convention":{"lang":"js","comma":{"first":15600,"last":284484,"commits":5161,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":511862,"space":2204545,"commits":9897,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63405,"nospace":126276,"commits":5688,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24870,"nospace":360309,"commits":7236,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":163746,"bothspace":43658,"nospace":57540,"commits":6178,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":143253,"nospace":36438,"commits":5600,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":329786,"double":251878,"commits":8476,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-21","convention":{"lang":"js","comma":{"first":19513,"last":298388,"commits":6149,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":460428,"space":2462687,"commits":11036,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67379,"nospace":147408,"commits":6606,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25374,"nospace":403027,"commits":8341,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":186563,"bothspace":30841,"nospace":74437,"commits":7050,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":150371,"nospace":43409,"commits":6421,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":354492,"double":260402,"commits":9570,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-20","convention":{"lang":"js","comma":{"first":21400,"last":340981,"commits":6234,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":530341,"space":2518217,"commits":11493,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68360,"nospace":144875,"commits":6684,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30013,"nospace":412419,"commits":8431,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":201301,"bothspace":36437,"nospace":70692,"commits":7312,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":159319,"nospace":43209,"commits":6507,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":376710,"double":298274,"commits":9758,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-19","convention":{"lang":"js","comma":{"first":13351,"last":297479,"commits":5574,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":434641,"space":2002350,"commits":10307,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":54757,"nospace":120584,"commits":5822,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16198,"nospace":337000,"commits":7524,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":159006,"bothspace":24295,"nospace":57916,"commits":6354,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":123211,"nospace":36216,"commits":5777,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":305388,"double":264591,"commits":8932,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-18","convention":{"lang":"js","comma":{"first":14973,"last":275659,"commits":4962,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":401135,"space":1995284,"commits":9234,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":51247,"nospace":122084,"commits":5345,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19175,"nospace":338835,"commits":6759,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":145331,"bothspace":31568,"nospace":51510,"commits":5698,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":130793,"nospace":32682,"commits":5188,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":328025,"double":239165,"commits":7934,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-17","convention":{"lang":"js","comma":{"first":27011,"last":473154,"commits":5749,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":696797,"space":2966007,"commits":10578,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":86778,"nospace":176810,"commits":6491,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20679,"nospace":503044,"commits":7977,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":212173,"bothspace":44143,"nospace":101934,"commits":6828,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":179534,"nospace":64153,"commits":6101,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":406190,"double":457454,"commits":9335,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-16","convention":{"lang":"js","comma":{"first":36628,"last":354698,"commits":6111,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":618496,"space":2868598,"commits":11467,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":85416,"nospace":177076,"commits":6940,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":31812,"nospace":493344,"commits":8654,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":209624,"bothspace":41473,"nospace":80860,"commits":7364,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":189180,"nospace":55657,"commits":6504,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":436806,"double":324515,"commits":10045,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-15","convention":{"lang":"js","comma":{"first":24044,"last":258565,"commits":5929,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":501641,"space":2288476,"commits":11168,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68170,"nospace":137232,"commits":6337,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21372,"nospace":387134,"commits":8135,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":179280,"bothspace":30152,"nospace":63527,"commits":7068,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":142842,"nospace":40124,"commits":6250,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":336086,"double":231481,"commits":9673,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-14","convention":{"lang":"js","comma":{"first":16980,"last":273315,"commits":5984,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":528377,"space":2163728,"commits":11230,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68326,"nospace":119919,"commits":6246,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18202,"nospace":360547,"commits":8088,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":174074,"bothspace":24102,"nospace":53602,"commits":6950,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":134949,"nospace":33582,"commits":6136,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":300477,"double":245389,"commits":9623,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-13","convention":{"lang":"js","comma":{"first":23519,"last":243925,"commits":5536,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":457645,"space":2166363,"commits":10408,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63479,"nospace":122232,"commits":5718,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25574,"nospace":357744,"commits":7379,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":174723,"bothspace":27608,"nospace":52094,"commits":6443,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":137720,"nospace":37171,"commits":5627,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":323641,"double":230832,"commits":8949,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-12","convention":{"lang":"js","comma":{"first":12939,"last":256248,"commits":4465,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":437643,"space":1823610,"commits":8292,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":46804,"nospace":107907,"commits":4917,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20645,"nospace":288583,"commits":6194,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":151127,"bothspace":29244,"nospace":55260,"commits":5153,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":107995,"nospace":30917,"commits":4691,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":262780,"double":226463,"commits":7131,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-11","convention":{"lang":"js","comma":{"first":24417,"last":276211,"commits":6091,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":459610,"space":2175198,"commits":10933,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":61176,"nospace":129629,"commits":6433,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22875,"nospace":374585,"commits":8148,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":168879,"bothspace":31688,"nospace":59541,"commits":7050,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":135455,"nospace":45178,"commits":6208,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":317088,"double":264865,"commits":9424,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-10","convention":{"lang":"js","comma":{"first":27894,"last":356234,"commits":6237,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":686972,"space":2931094,"commits":11472,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":88716,"nospace":183243,"commits":7121,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27266,"nospace":518273,"commits":8814,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":220461,"bothspace":41909,"nospace":81052,"commits":7502,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":186713,"nospace":66649,"commits":6793,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":415219,"double":328992,"commits":10166,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-09","convention":{"lang":"js","comma":{"first":24717,"last":284388,"commits":4308,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":485908,"space":2345609,"commits":7895,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":76576,"nospace":128363,"commits":4926,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20104,"nospace":400283,"commits":6088,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":160459,"bothspace":49705,"nospace":57842,"commits":5228,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":154796,"nospace":43120,"commits":4682,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":353380,"double":265998,"commits":7012,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-08","convention":{"lang":"js","comma":{"first":34396,"last":307508,"commits":6411,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":539414,"space":2509905,"commits":11676,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":75145,"nospace":147437,"commits":6800,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26258,"nospace":415895,"commits":8677,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":202966,"bothspace":42440,"nospace":72691,"commits":7358,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":152537,"nospace":46488,"commits":6581,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":375487,"double":322189,"commits":10141,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-07","convention":{"lang":"js","comma":{"first":22392,"last":326681,"commits":6303,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":685130,"space":2655649,"commits":11384,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63063,"nospace":156506,"commits":6507,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":37627,"nospace":418819,"commits":8354,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":198709,"bothspace":42084,"nospace":72682,"commits":7176,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":165870,"nospace":45310,"commits":6407,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":378548,"double":279307,"commits":9732,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-06","convention":{"lang":"js","comma":{"first":21781,"last":302823,"commits":5241,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":525475,"space":2247369,"commits":9916,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":61103,"nospace":126635,"commits":5609,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22181,"nospace":369054,"commits":7196,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":167651,"bothspace":33507,"nospace":62760,"commits":6108,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":143306,"nospace":39803,"commits":5614,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":342161,"double":269651,"commits":8425,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-05","convention":{"lang":"js","comma":{"first":19515,"last":253665,"commits":5549,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":374169,"space":1928288,"commits":10314,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56638,"nospace":108527,"commits":5802,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16956,"nospace":321942,"commits":7487,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":155911,"bothspace":27465,"nospace":53105,"commits":6331,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":119100,"nospace":34700,"commits":5841,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":290289,"double":230154,"commits":8820,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-04","convention":{"lang":"js","comma":{"first":10703,"last":132752,"commits":2167,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":197976,"space":938767,"commits":4147,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":29086,"nospace":53803,"commits":2410,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":7400,"nospace":159787,"commits":3040,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":71362,"bothspace":9673,"nospace":25711,"commits":2627,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":61959,"nospace":15071,"commits":2346,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":138720,"double":121681,"commits":3592,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-03","convention":{"lang":"js","comma":{"first":6302,"last":33880,"commits":465,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":75509,"space":331166,"commits":882,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":10443,"nospace":20729,"commits":586,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":3826,"nospace":59130,"commits":694,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":26830,"bothspace":4627,"nospace":9794,"commits":602,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":21178,"nospace":9507,"commits":526,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":53720,"double":27824,"commits":816,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-02","convention":{"lang":"js","comma":{"first":33702,"last":408135,"commits":5625,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":564185,"space":3085494,"commits":10465,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":94178,"nospace":176620,"commits":6576,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27963,"nospace":530032,"commits":7970,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":201665,"bothspace":52591,"nospace":115778,"commits":6856,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":207473,"nospace":56888,"commits":6058,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":464061,"double":332861,"commits":9219,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-11-01","convention":{"lang":"js","comma":{"first":23167,"last":426417,"commits":5202,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":585679,"space":2692590,"commits":9436,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66551,"nospace":152119,"commits":5639,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27035,"nospace":419129,"commits":7045,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":194903,"bothspace":58354,"nospace":67846,"commits":6062,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":156724,"nospace":51550,"commits":5423,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":348880,"double":391907,"commits":8251,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-31","convention":{"lang":"js","comma":{"first":19231,"last":251338,"commits":5028,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":444861,"space":1900488,"commits":9273,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":51464,"nospace":108028,"commits":5473,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17390,"nospace":313646,"commits":6936,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":184662,"bothspace":25123,"nospace":54134,"commits":5960,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":123375,"nospace":31836,"commits":5428,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":298374,"double":200106,"commits":8023,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-30","convention":{"lang":"js","comma":{"first":18311,"last":383342,"commits":5757,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":524695,"space":2578486,"commits":10471,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":70054,"nospace":150076,"commits":6005,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33734,"nospace":409374,"commits":7703,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":206297,"bothspace":33787,"nospace":71011,"commits":6730,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":156467,"nospace":44185,"commits":6031,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":353135,"double":356973,"commits":8955,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-29","convention":{"lang":"js","comma":{"first":21286,"last":258754,"commits":4932,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":480937,"space":1961670,"commits":9147,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":54478,"nospace":116052,"commits":5337,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20981,"nospace":324452,"commits":6790,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":150875,"bothspace":48382,"nospace":59065,"commits":5788,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":120381,"nospace":36810,"commits":5302,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":312062,"double":210719,"commits":7812,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-28","convention":{"lang":"js","comma":{"first":11172,"last":304579,"commits":3813,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":517375,"space":1943722,"commits":6953,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":51016,"nospace":101447,"commits":4148,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23158,"nospace":308204,"commits":5325,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":139484,"bothspace":33044,"nospace":47894,"commits":4503,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":123370,"nospace":39475,"commits":4198,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":254260,"double":239739,"commits":6101,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-27","convention":{"lang":"js","comma":{"first":24245,"last":255486,"commits":4879,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":518325,"space":2348448,"commits":8847,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":79000,"nospace":135687,"commits":5417,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19992,"nospace":412855,"commits":6700,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":174414,"bothspace":34234,"nospace":59445,"commits":5809,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":156800,"nospace":42916,"commits":5230,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":366949,"double":208025,"commits":7820,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-26","convention":{"lang":"js","comma":{"first":29927,"last":304615,"commits":5136,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":630121,"space":2423860,"commits":9378,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69097,"nospace":146988,"commits":5895,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24153,"nospace":412666,"commits":7180,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":185372,"bothspace":52747,"nospace":67435,"commits":6133,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":157272,"nospace":48984,"commits":5448,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":356185,"double":256441,"commits":8221,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-25","convention":{"lang":"js","comma":{"first":15732,"last":201697,"commits":3842,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":409176,"space":1552858,"commits":7113,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":42081,"nospace":96907,"commits":4199,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":14340,"nospace":267445,"commits":5373,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":128018,"bothspace":32950,"nospace":40385,"commits":4434,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":98527,"nospace":33501,"commits":4116,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":233921,"double":183449,"commits":6189,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-24","convention":{"lang":"js","comma":{"first":19391,"last":220959,"commits":4208,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":500381,"space":1793260,"commits":8021,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53221,"nospace":101691,"commits":4685,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23188,"nospace":293128,"commits":6090,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":139167,"bothspace":26547,"nospace":46071,"commits":5039,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":110392,"nospace":35527,"commits":4735,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":243713,"double":204942,"commits":6937,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-23","convention":{"lang":"js","comma":{"first":11872,"last":193467,"commits":3223,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":269297,"space":1238173,"commits":5684,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":42176,"nospace":63531,"commits":3330,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10374,"nospace":206499,"commits":4190,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":96656,"bothspace":14565,"nospace":33548,"commits":3653,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":82202,"nospace":19000,"commits":3266,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":184338,"double":173956,"commits":4997,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-22","convention":{"lang":"js","comma":{"first":17368,"last":266807,"commits":4726,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":380793,"space":1946668,"commits":8523,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":54877,"nospace":114375,"commits":5138,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21924,"nospace":324013,"commits":6340,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":147790,"bothspace":25499,"nospace":54219,"commits":5506,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124155,"nospace":36423,"commits":4922,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":259317,"double":242115,"commits":7356,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-21","convention":{"lang":"js","comma":{"first":12723,"last":203402,"commits":4562,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":355992,"space":1587506,"commits":8341,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":41873,"nospace":103051,"commits":4791,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15734,"nospace":264886,"commits":6010,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":114697,"bothspace":28695,"nospace":43041,"commits":5152,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":97742,"nospace":27649,"commits":4621,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":241211,"double":191815,"commits":7156,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-20","convention":{"lang":"js","comma":{"first":34648,"last":305437,"commits":5273,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":615761,"space":2648948,"commits":9687,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":79312,"nospace":149467,"commits":6142,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36181,"nospace":441354,"commits":7480,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":205558,"bothspace":33418,"nospace":69013,"commits":6484,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":174173,"nospace":53852,"commits":5822,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":389713,"double":283133,"commits":8673,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-19","convention":{"lang":"js","comma":{"first":40036,"last":384568,"commits":5857,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":621490,"space":2822796,"commits":10221,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":76665,"nospace":172437,"commits":6634,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30826,"nospace":462248,"commits":7922,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":236885,"bothspace":56478,"nospace":79049,"commits":6898,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":181081,"nospace":47542,"commits":6021,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":441862,"double":308229,"commits":9213,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-18","convention":{"lang":"js","comma":{"first":25782,"last":288150,"commits":5396,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":531784,"space":2482137,"commits":10002,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74306,"nospace":144634,"commits":5930,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23029,"nospace":420911,"commits":7528,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":179185,"bothspace":32947,"nospace":63745,"commits":6316,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":160791,"nospace":42526,"commits":5733,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":342153,"double":271497,"commits":8753,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-17","convention":{"lang":"js","comma":{"first":20639,"last":269950,"commits":4207,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":358621,"space":1799026,"commits":7752,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":47548,"nospace":102039,"commits":4417,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":12796,"nospace":291653,"commits":5787,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":134946,"bothspace":21990,"nospace":44541,"commits":4909,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":106979,"nospace":30415,"commits":4507,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":277153,"double":197462,"commits":6770,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-16","convention":{"lang":"js","comma":{"first":16652,"last":250705,"commits":3814,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":408645,"space":1758806,"commits":6940,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":38356,"nospace":110776,"commits":4086,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22252,"nospace":273199,"commits":5170,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":130502,"bothspace":39760,"nospace":46318,"commits":4430,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":101852,"nospace":33229,"commits":4002,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":262707,"double":212910,"commits":6072,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-15","convention":{"lang":"js","comma":{"first":13720,"last":254151,"commits":3985,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":461663,"space":1813426,"commits":7373,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":40604,"nospace":108467,"commits":4279,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25969,"nospace":280128,"commits":5460,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":135202,"bothspace":28428,"nospace":44414,"commits":4557,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":113252,"nospace":29430,"commits":4247,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":232868,"double":260615,"commits":6319,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-14","convention":{"lang":"js","comma":{"first":15567,"last":271718,"commits":4029,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":470410,"space":1737767,"commits":7411,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":47778,"nospace":93210,"commits":4385,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23295,"nospace":268942,"commits":5637,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":131755,"bothspace":28750,"nospace":39975,"commits":4718,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":111473,"nospace":26520,"commits":4404,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":233249,"double":257923,"commits":6295,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-13","convention":{"lang":"js","comma":{"first":32174,"last":361972,"commits":5406,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":655775,"space":2901751,"commits":9822,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":84550,"nospace":176578,"commits":6300,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33652,"nospace":483941,"commits":7639,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":208557,"bothspace":51681,"nospace":73843,"commits":6580,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":183065,"nospace":56814,"commits":5862,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":419430,"double":322328,"commits":8784,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-12","convention":{"lang":"js","comma":{"first":34589,"last":369480,"commits":5691,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":815375,"space":3171536,"commits":10666,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":86603,"nospace":188357,"commits":6643,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36396,"nospace":533190,"commits":8142,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":231408,"bothspace":85022,"nospace":74981,"commits":6939,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":199959,"nospace":70078,"commits":6137,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":473637,"double":316364,"commits":9398,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-11","convention":{"lang":"js","comma":{"first":24043,"last":330966,"commits":5342,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":518355,"space":2528771,"commits":9515,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64884,"nospace":145113,"commits":5815,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25238,"nospace":416923,"commits":7286,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":180178,"bothspace":40745,"nospace":57808,"commits":6169,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":166074,"nospace":42400,"commits":5582,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":334943,"double":305118,"commits":8286,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-10","convention":{"lang":"js","comma":{"first":16129,"last":249961,"commits":4842,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":367499,"space":1672897,"commits":8606,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":41009,"nospace":103612,"commits":5166,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10188,"nospace":271959,"commits":6374,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":127457,"bothspace":21821,"nospace":42206,"commits":5543,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":99525,"nospace":26886,"commits":4977,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":222569,"double":234876,"commits":7509,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-09","convention":{"lang":"js","comma":{"first":23367,"last":242528,"commits":5546,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":622884,"space":2134920,"commits":9986,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":57234,"nospace":133352,"commits":5945,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34290,"nospace":347992,"commits":7506,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":170242,"bothspace":35794,"nospace":56727,"commits":6466,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":136645,"nospace":37058,"commits":5902,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":315106,"double":196706,"commits":8606,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-08","convention":{"lang":"js","comma":{"first":22266,"last":320338,"commits":5223,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":500886,"space":2174195,"commits":9154,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56473,"nospace":128790,"commits":5415,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18369,"nospace":361673,"commits":6778,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":156752,"bothspace":36684,"nospace":53962,"commits":5952,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":129089,"nospace":50914,"commits":5361,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":301665,"double":236228,"commits":7981,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-07","convention":{"lang":"js","comma":{"first":22587,"last":293340,"commits":6075,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":609142,"space":2356260,"commits":10564,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68676,"nospace":129173,"commits":6270,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33745,"nospace":368166,"commits":7791,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":163900,"bothspace":43157,"nospace":54130,"commits":6860,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":147810,"nospace":40009,"commits":6058,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":345521,"double":240354,"commits":9043,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-06","convention":{"lang":"js","comma":{"first":22623,"last":259620,"commits":4436,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":547043,"space":1986279,"commits":8556,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53267,"nospace":128477,"commits":5222,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24261,"nospace":335716,"commits":6446,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":144630,"bothspace":33771,"nospace":64754,"commits":5547,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126999,"nospace":41042,"commits":4928,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":286114,"double":240627,"commits":7515,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-05","convention":{"lang":"js","comma":{"first":34102,"last":428718,"commits":4973,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":693923,"space":2618936,"commits":9222,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":72792,"nospace":154157,"commits":5676,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":32385,"nospace":414635,"commits":6931,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":193646,"bothspace":95747,"nospace":98614,"commits":6005,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":167116,"nospace":36228,"commits":5295,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":423130,"double":341564,"commits":8196,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-04","convention":{"lang":"js","comma":{"first":15025,"last":251523,"commits":4301,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":533455,"space":1940204,"commits":7810,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53946,"nospace":104827,"commits":4480,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21147,"nospace":312650,"commits":5712,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":122356,"bothspace":37779,"nospace":50040,"commits":5040,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":132512,"nospace":32306,"commits":4512,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":261764,"double":189340,"commits":6706,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-03","convention":{"lang":"js","comma":{"first":22323,"last":278486,"commits":5174,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":561027,"space":2166190,"commits":9422,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59547,"nospace":129762,"commits":5511,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24715,"nospace":365168,"commits":6939,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":152988,"bothspace":36714,"nospace":50730,"commits":5887,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":143501,"nospace":35487,"commits":5300,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":331156,"double":230925,"commits":7959,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-02","convention":{"lang":"js","comma":{"first":21042,"last":293838,"commits":5505,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":519728,"space":2224018,"commits":10246,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":51653,"nospace":127437,"commits":5764,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22372,"nospace":358535,"commits":7516,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":162752,"bothspace":38288,"nospace":65832,"commits":6519,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":142800,"nospace":38182,"commits":5837,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":309811,"double":243548,"commits":8672,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-10-01","convention":{"lang":"js","comma":{"first":19243,"last":304972,"commits":5454,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":506754,"space":2143820,"commits":9880,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56844,"nospace":125549,"commits":5718,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26426,"nospace":347773,"commits":7338,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":165198,"bothspace":26195,"nospace":68709,"commits":6313,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":136700,"nospace":37573,"commits":5712,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":293961,"double":297244,"commits":8534,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-30","convention":{"lang":"js","comma":{"first":21597,"last":292992,"commits":6178,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":568255,"space":2458037,"commits":11435,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67301,"nospace":147823,"commits":6662,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30842,"nospace":404435,"commits":8480,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":178215,"bothspace":37345,"nospace":63563,"commits":7204,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":156856,"nospace":41884,"commits":6526,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":322778,"double":287405,"commits":9805,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-29","convention":{"lang":"js","comma":{"first":39249,"last":352735,"commits":5786,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":833627,"space":2971423,"commits":10563,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":91133,"nospace":181441,"commits":6529,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":40849,"nospace":515979,"commits":8032,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":236833,"bothspace":41239,"nospace":88218,"commits":6803,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":203154,"nospace":54705,"commits":6173,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":424793,"double":366614,"commits":9350,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-28","convention":{"lang":"js","comma":{"first":42843,"last":352262,"commits":5736,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":745609,"space":2964228,"commits":10641,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":92775,"nospace":175192,"commits":6500,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":37554,"nospace":504423,"commits":8029,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":237161,"bothspace":52178,"nospace":76454,"commits":6925,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":194198,"nospace":59586,"commits":6084,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":465888,"double":297615,"commits":9412,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-27","convention":{"lang":"js","comma":{"first":39933,"last":327364,"commits":6316,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":733595,"space":2972302,"commits":11581,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":89932,"nospace":168932,"commits":6848,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30085,"nospace":503980,"commits":8610,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":223171,"bothspace":41426,"nospace":81516,"commits":7487,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":199826,"nospace":48318,"commits":6671,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":432765,"double":301798,"commits":10021,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-26","convention":{"lang":"js","comma":{"first":16556,"last":410508,"commits":5775,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":608122,"space":2550389,"commits":10376,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67782,"nospace":128183,"commits":6035,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":29136,"nospace":378302,"commits":7692,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":221653,"bothspace":42703,"nospace":72486,"commits":6606,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":145926,"nospace":44763,"commits":5912,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":331745,"double":318426,"commits":9052,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-25","convention":{"lang":"js","comma":{"first":25039,"last":494336,"commits":6304,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":1008433,"space":3452308,"commits":11660,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":86722,"nospace":210998,"commits":6692,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":39067,"nospace":573134,"commits":8537,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":303118,"bothspace":93314,"nospace":80698,"commits":7344,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":223838,"nospace":61581,"commits":6651,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":519207,"double":355512,"commits":10107,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-24","convention":{"lang":"js","comma":{"first":23000,"last":255440,"commits":5676,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":503093,"space":2228041,"commits":10579,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":60007,"nospace":128283,"commits":6075,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22989,"nospace":366517,"commits":7751,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":157755,"bothspace":38258,"nospace":51348,"commits":6678,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":136098,"nospace":33721,"commits":5782,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":312996,"double":238029,"commits":9240,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-23","convention":{"lang":"js","comma":{"first":18544,"last":295057,"commits":5305,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":441449,"space":2293321,"commits":10099,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69799,"nospace":129937,"commits":5850,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20760,"nospace":385643,"commits":7427,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":172172,"bothspace":53006,"nospace":54392,"commits":6392,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":149006,"nospace":34069,"commits":5635,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":384944,"double":218774,"commits":8764,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-22","convention":{"lang":"js","comma":{"first":40216,"last":326666,"commits":6315,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":788324,"space":3011547,"commits":11419,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":88682,"nospace":181274,"commits":7119,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":39765,"nospace":513463,"commits":8789,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":226719,"bothspace":57775,"nospace":86931,"commits":7547,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":198838,"nospace":61580,"commits":6763,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":423739,"double":308335,"commits":10172,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-21","convention":{"lang":"js","comma":{"first":48902,"last":392507,"commits":5942,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":809193,"space":3533597,"commits":10993,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":111327,"nospace":213659,"commits":6839,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":37672,"nospace":607093,"commits":8406,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":260264,"bothspace":77882,"nospace":98221,"commits":7206,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":233049,"nospace":67185,"commits":6479,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":552825,"double":320101,"commits":9726,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-20","convention":{"lang":"js","comma":{"first":29783,"last":309369,"commits":5679,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":576203,"space":2835075,"commits":10198,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":83068,"nospace":160704,"commits":6069,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27190,"nospace":482572,"commits":7526,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":203175,"bothspace":41526,"nospace":70426,"commits":6509,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":187031,"nospace":53079,"commits":5823,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":417660,"double":253413,"commits":8965,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-19","convention":{"lang":"js","comma":{"first":21169,"last":546430,"commits":5013,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":589387,"space":2142113,"commits":9117,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59908,"nospace":131784,"commits":5449,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24425,"nospace":368361,"commits":6837,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":189013,"bothspace":40771,"nospace":286554,"commits":5842,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":148136,"nospace":39873,"commits":5299,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":326899,"double":304573,"commits":8090,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-18","convention":{"lang":"js","comma":{"first":23056,"last":283495,"commits":5644,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":531050,"space":2139977,"commits":10188,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":49037,"nospace":123894,"commits":5982,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22818,"nospace":338314,"commits":7619,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":159971,"bothspace":54572,"nospace":54121,"commits":6303,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":131421,"nospace":37042,"commits":5857,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":340325,"double":225532,"commits":8786,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-17","convention":{"lang":"js","comma":{"first":25803,"last":451453,"commits":5793,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":492512,"space":2363294,"commits":10801,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":73555,"nospace":130647,"commits":6350,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22242,"nospace":381999,"commits":8079,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":190577,"bothspace":35468,"nospace":149484,"commits":6707,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":141290,"nospace":39649,"commits":6146,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":315199,"double":313756,"commits":9271,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-16","convention":{"lang":"js","comma":{"first":27623,"last":364369,"commits":6516,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":627576,"space":2798373,"commits":11539,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":80404,"nospace":154305,"commits":6744,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":29867,"nospace":430832,"commits":8629,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":193397,"bothspace":94917,"nospace":72886,"commits":7472,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":163466,"nospace":43150,"commits":6733,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":399402,"double":290445,"commits":9918,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-15","convention":{"lang":"js","comma":{"first":43364,"last":583762,"commits":6413,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":832649,"space":3668790,"commits":11372,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":102196,"nospace":193786,"commits":7045,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":43136,"nospace":565925,"commits":8660,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":256196,"bothspace":76776,"nospace":103274,"commits":7615,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":227223,"nospace":64288,"commits":6577,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":490329,"double":659486,"commits":10124,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-14","convention":{"lang":"js","comma":{"first":45483,"last":435425,"commits":6011,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":776022,"space":3542895,"commits":11068,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":104082,"nospace":212563,"commits":6856,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":38885,"nospace":607004,"commits":8495,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":247947,"bothspace":88670,"nospace":93966,"commits":7387,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":235951,"nospace":67446,"commits":6438,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":531036,"double":396099,"commits":9917,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-13","convention":{"lang":"js","comma":{"first":30743,"last":379926,"commits":5526,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":766670,"space":2715723,"commits":10132,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67816,"nospace":158361,"commits":6093,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36078,"nospace":423245,"commits":7694,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":201824,"bothspace":140918,"nospace":70215,"commits":6567,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":168248,"nospace":50427,"commits":5940,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":483089,"double":253967,"commits":8819,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-12","convention":{"lang":"js","comma":{"first":16230,"last":260238,"commits":5188,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":515865,"space":2040961,"commits":9426,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53577,"nospace":118467,"commits":5443,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17816,"nospace":338126,"commits":6994,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":169612,"bothspace":50613,"nospace":59589,"commits":6019,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":132491,"nospace":35106,"commits":5410,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":289094,"double":235010,"commits":8122,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-11","convention":{"lang":"js","comma":{"first":19697,"last":319095,"commits":5152,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":474823,"space":2171994,"commits":9471,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":52934,"nospace":122401,"commits":5415,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16737,"nospace":370783,"commits":7099,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":184622,"bothspace":45317,"nospace":52128,"commits":6034,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":147376,"nospace":35526,"commits":5610,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":334168,"double":270597,"commits":8164,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-10","convention":{"lang":"js","comma":{"first":6865,"last":128690,"commits":2813,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":309606,"space":976550,"commits":5074,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":26600,"nospace":59599,"commits":2919,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10217,"nospace":159454,"commits":3757,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":87793,"bothspace":18888,"nospace":33416,"commits":3296,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":56415,"nospace":22152,"commits":2934,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":135294,"double":113849,"commits":4330,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-09","convention":{"lang":"js","comma":{"first":20272,"last":223447,"commits":4200,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":476346,"space":1842853,"commits":7528,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":45568,"nospace":117468,"commits":4455,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21728,"nospace":318999,"commits":5655,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":133342,"bothspace":26552,"nospace":53458,"commits":4858,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":124513,"nospace":36540,"commits":4311,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":284274,"double":195809,"commits":6551,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-08","convention":{"lang":"js","comma":{"first":35653,"last":222153,"commits":3730,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":419660,"space":2177418,"commits":6749,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":65130,"nospace":147653,"commits":4235,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17704,"nospace":401998,"commits":5128,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":164212,"bothspace":31251,"nospace":53836,"commits":4485,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":159857,"nospace":30490,"commits":3916,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":322823,"double":204080,"commits":6030,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-07","convention":{"lang":"js","comma":{"first":41450,"last":309274,"commits":5177,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":599288,"space":2776243,"commits":9143,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":91733,"nospace":156714,"commits":5882,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26075,"nospace":482732,"commits":7131,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":205002,"bothspace":33815,"nospace":68469,"commits":6181,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":189124,"nospace":45508,"commits":5539,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":392172,"double":295359,"commits":8240,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-06","convention":{"lang":"js","comma":{"first":34119,"last":281277,"commits":3618,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":380856,"space":2135353,"commits":6525,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63141,"nospace":115246,"commits":3994,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15767,"nospace":360319,"commits":4993,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":146344,"bothspace":22658,"nospace":57299,"commits":4255,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":144788,"nospace":29770,"commits":3844,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":295826,"double":289600,"commits":5805,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-05","convention":{"lang":"js","comma":{"first":6901,"last":39715,"commits":1172,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":105865,"space":410002,"commits":2137,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":11026,"nospace":26508,"commits":1292,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":3315,"nospace":71189,"commits":1583,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":30184,"bothspace":6150,"nospace":11025,"commits":1410,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":27150,"nospace":7017,"commits":1212,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":65146,"double":35408,"commits":1838,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-04","convention":{"lang":"js","comma":{"first":2900,"last":30808,"commits":760,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":57478,"space":258171,"commits":1475,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":5910,"nospace":16999,"commits":856,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":1287,"nospace":45058,"commits":1116,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":24082,"bothspace":4394,"nospace":5219,"commits":897,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":16892,"nospace":3918,"commits":864,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":37286,"double":24578,"commits":1240,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-03","convention":{"lang":"js","comma":{"first":13250,"last":206184,"commits":3668,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":303575,"space":1561015,"commits":6535,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":31849,"nospace":96391,"commits":3971,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":10757,"nospace":249482,"commits":4934,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":115238,"bothspace":33008,"nospace":34746,"commits":4304,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":96491,"nospace":21633,"commits":3813,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":219543,"double":170242,"commits":5784,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-02","convention":{"lang":"js","comma":{"first":29800,"last":295861,"commits":5746,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":525693,"space":2404874,"commits":10575,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69191,"nospace":148312,"commits":6539,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22629,"nospace":409364,"commits":8002,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":177473,"bothspace":42939,"nospace":64246,"commits":6868,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":151631,"nospace":45814,"commits":6173,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":346221,"double":269789,"commits":9298,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-09-01","convention":{"lang":"js","comma":{"first":39078,"last":326260,"commits":5014,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":756274,"space":2836471,"commits":9260,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":94273,"nospace":168510,"commits":5895,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30362,"nospace":488697,"commits":7029,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":199721,"bothspace":58378,"nospace":87739,"commits":6192,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":180247,"nospace":53347,"commits":5275,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":431012,"double":284312,"commits":8282,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-31","convention":{"lang":"js","comma":{"first":54876,"last":422422,"commits":5693,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":760771,"space":3560984,"commits":10426,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":111233,"nospace":208725,"commits":6660,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33229,"nospace":614085,"commits":8100,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":271411,"bothspace":48701,"nospace":90689,"commits":6905,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":234256,"nospace":69425,"commits":6123,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":517920,"double":383720,"commits":9344,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-30","convention":{"lang":"js","comma":{"first":34125,"last":415568,"commits":6023,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":470627,"space":3057390,"commits":10927,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":87253,"nospace":178841,"commits":6637,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":16765,"nospace":526292,"commits":8378,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":221536,"bothspace":55973,"nospace":82197,"commits":7041,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":199631,"nospace":48163,"commits":6381,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":451150,"double":377730,"commits":9555,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-29","convention":{"lang":"js","comma":{"first":21124,"last":337079,"commits":5309,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":523537,"space":2228909,"commits":9859,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56391,"nospace":130726,"commits":5897,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21130,"nospace":375850,"commits":7466,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":178085,"bothspace":33204,"nospace":59837,"commits":6335,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":146408,"nospace":41798,"commits":5866,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":329606,"double":304719,"commits":8568,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-28","convention":{"lang":"js","comma":{"first":35300,"last":359983,"commits":5959,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":515401,"space":2529840,"commits":10828,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":77068,"nospace":147491,"commits":6485,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24311,"nospace":433081,"commits":8135,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":202354,"bothspace":53943,"nospace":65092,"commits":7075,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":165229,"nospace":49495,"commits":6363,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":367174,"double":321979,"commits":9481,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-27","convention":{"lang":"js","comma":{"first":28515,"last":360823,"commits":6092,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":627668,"space":2839371,"commits":10744,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82344,"nospace":159880,"commits":6451,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26784,"nospace":485426,"commits":8111,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":223485,"bothspace":41244,"nospace":70110,"commits":7059,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":198932,"nospace":42016,"commits":6248,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":411663,"double":303811,"commits":9306,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-26","convention":{"lang":"js","comma":{"first":25505,"last":307951,"commits":5308,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":537453,"space":2554680,"commits":9667,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":73929,"nospace":143440,"commits":5752,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17609,"nospace":427434,"commits":7229,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":200852,"bothspace":36404,"nospace":64224,"commits":6232,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":164455,"nospace":38710,"commits":5610,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":344198,"double":252326,"commits":8328,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-25","convention":{"lang":"js","comma":{"first":47276,"last":371822,"commits":6159,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":753160,"space":3296229,"commits":11202,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":106641,"nospace":205014,"commits":7333,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":28922,"nospace":587389,"commits":8793,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":232099,"bothspace":58815,"nospace":92461,"commits":7546,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":213657,"nospace":71483,"commits":6599,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":510225,"double":313398,"commits":10044,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-24","convention":{"lang":"js","comma":{"first":45717,"last":409280,"commits":5811,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":672933,"space":3261065,"commits":10681,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":102431,"nospace":194331,"commits":6881,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30443,"nospace":564460,"commits":8302,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":224369,"bothspace":51061,"nospace":79469,"commits":7019,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":222487,"nospace":50825,"commits":6259,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":492447,"double":373917,"commits":9513,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-23","convention":{"lang":"js","comma":{"first":41042,"last":312947,"commits":5501,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":512140,"space":2759478,"commits":9920,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82294,"nospace":152898,"commits":6038,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26294,"nospace":452572,"commits":7461,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":209190,"bothspace":45548,"nospace":59541,"commits":6563,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":182217,"nospace":39382,"commits":5763,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":388503,"double":294768,"commits":8744,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-22","convention":{"lang":"js","comma":{"first":16883,"last":251073,"commits":4844,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":476508,"space":1895538,"commits":8567,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":50957,"nospace":108181,"commits":4994,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21965,"nospace":306333,"commits":6299,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":173108,"bothspace":46354,"nospace":51676,"commits":5453,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":121372,"nospace":34552,"commits":4823,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":298259,"double":201051,"commits":7464,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-21","convention":{"lang":"js","comma":{"first":14563,"last":264239,"commits":4272,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":487415,"space":1933211,"commits":7801,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":45725,"nospace":113127,"commits":4546,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15718,"nospace":313100,"commits":5689,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":151286,"bothspace":39705,"nospace":50001,"commits":4919,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126890,"nospace":30802,"commits":4408,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":299060,"double":197889,"commits":6787,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-20","convention":{"lang":"js","comma":{"first":25368,"last":319189,"commits":6437,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":577762,"space":2681717,"commits":11839,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":74062,"nospace":143160,"commits":7003,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23100,"nospace":434329,"commits":8863,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":186351,"bothspace":55926,"nospace":65559,"commits":7460,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":173680,"nospace":42557,"commits":6870,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":381825,"double":260792,"commits":10100,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-19","convention":{"lang":"js","comma":{"first":21227,"last":264160,"commits":5313,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":435280,"space":1875372,"commits":9847,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":56083,"nospace":112496,"commits":5878,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17699,"nospace":309815,"commits":7411,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":156004,"bothspace":30908,"nospace":49680,"commits":6316,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":115023,"nospace":31159,"commits":5633,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":300902,"double":229432,"commits":8555,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-18","convention":{"lang":"js","comma":{"first":44831,"last":343649,"commits":6047,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":841510,"space":2972853,"commits":11303,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":78451,"nospace":185155,"commits":7104,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":41232,"nospace":498831,"commits":8741,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":243595,"bothspace":45285,"nospace":80490,"commits":7362,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":198305,"nospace":55170,"commits":6685,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":448497,"double":287762,"commits":10089,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-17","convention":{"lang":"js","comma":{"first":48601,"last":384429,"commits":5571,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":863446,"space":3112573,"commits":10473,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":92761,"nospace":188488,"commits":6662,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36860,"nospace":524932,"commits":8089,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":222996,"bothspace":55037,"nospace":83573,"commits":6861,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":205394,"nospace":56290,"commits":6187,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":480156,"double":333540,"commits":9399,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-16","convention":{"lang":"js","comma":{"first":18832,"last":217410,"commits":4234,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":317560,"space":1913553,"commits":7553,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":49905,"nospace":110435,"commits":4676,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":14453,"nospace":323007,"commits":5742,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":152182,"bothspace":28182,"nospace":47998,"commits":4876,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":126166,"nospace":32407,"commits":4458,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":266523,"double":179336,"commits":6617,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-15","convention":{"lang":"js","comma":{"first":29165,"last":239736,"commits":4841,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":431386,"space":2111322,"commits":8830,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59705,"nospace":123379,"commits":5246,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22863,"nospace":347263,"commits":6609,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":155502,"bothspace":36784,"nospace":49676,"commits":5750,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":134865,"nospace":34185,"commits":5146,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":329055,"double":195933,"commits":7675,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-14","convention":{"lang":"js","comma":{"first":31041,"last":293328,"commits":5560,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":555037,"space":2372496,"commits":10188,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66686,"nospace":138611,"commits":6142,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27297,"nospace":389439,"commits":7724,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":188631,"bothspace":31821,"nospace":67338,"commits":6517,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":158712,"nospace":33507,"commits":5942,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":352900,"double":256553,"commits":8852,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-13","convention":{"lang":"js","comma":{"first":32055,"last":273116,"commits":5676,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":445448,"space":2138124,"commits":10405,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":59322,"nospace":128978,"commits":6235,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":18976,"nospace":381657,"commits":7828,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":166458,"bothspace":37834,"nospace":54944,"commits":6586,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":162112,"nospace":33298,"commits":5947,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":319970,"double":237348,"commits":8992,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-12","convention":{"lang":"js","comma":{"first":21306,"last":334271,"commits":5023,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":454672,"space":2319562,"commits":9122,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":66987,"nospace":144495,"commits":5504,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":17657,"nospace":405019,"commits":6832,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":183782,"bothspace":34401,"nospace":63331,"commits":5831,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":148155,"nospace":47422,"commits":5243,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":341607,"double":284037,"commits":7913,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-11","convention":{"lang":"js","comma":{"first":33527,"last":276644,"commits":4627,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":508635,"space":2268498,"commits":8483,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":73604,"nospace":140984,"commits":5533,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20596,"nospace":398264,"commits":6672,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":155915,"bothspace":31004,"nospace":64000,"commits":5729,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":149170,"nospace":44187,"commits":5053,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":349797,"double":236402,"commits":7643,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-10","convention":{"lang":"js","comma":{"first":49695,"last":339752,"commits":5691,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":722761,"space":3316918,"commits":10733,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":102544,"nospace":203182,"commits":6580,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":34160,"nospace":580812,"commits":8013,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":232861,"bothspace":51185,"nospace":80629,"commits":6932,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":226995,"nospace":58969,"commits":6117,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":514636,"double":303632,"commits":9706,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-09","convention":{"lang":"js","comma":{"first":21716,"last":224932,"commits":4444,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":502521,"space":1791248,"commits":7747,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":50211,"nospace":109462,"commits":4497,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22696,"nospace":299089,"commits":5557,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":136303,"bothspace":20650,"nospace":64468,"commits":5171,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":114359,"nospace":35711,"commits":4231,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":257427,"double":203189,"commits":6882,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-08","convention":{"lang":"js","comma":{"first":26602,"last":333130,"commits":5839,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":645112,"space":2593506,"commits":10546,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":69738,"nospace":153324,"commits":6286,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":26560,"nospace":423910,"commits":7882,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":200228,"bothspace":53415,"nospace":71253,"commits":6911,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":162545,"nospace":43314,"commits":6117,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":373282,"double":311146,"commits":9165,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-07","convention":{"lang":"js","comma":{"first":20681,"last":402796,"commits":5912,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":613183,"space":2461244,"commits":10698,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":60707,"nospace":135935,"commits":6361,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":23063,"nospace":374771,"commits":7957,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":222597,"bothspace":57517,"nospace":84671,"commits":6720,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":141321,"nospace":44966,"commits":6072,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":362926,"double":321225,"commits":9288,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-06","convention":{"lang":"js","comma":{"first":27077,"last":383820,"commits":5256,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":520481,"space":2497906,"commits":9542,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":70304,"nospace":142694,"commits":5534,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21966,"nospace":406621,"commits":7043,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":203862,"bothspace":33651,"nospace":74046,"commits":6118,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":153675,"nospace":40675,"commits":5454,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":351485,"double":338071,"commits":8378,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-05","convention":{"lang":"js","comma":{"first":26683,"last":251631,"commits":5575,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":580870,"space":2262267,"commits":10388,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":60951,"nospace":144629,"commits":6160,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22410,"nospace":384962,"commits":7766,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":173862,"bothspace":44187,"nospace":62059,"commits":6526,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":146658,"nospace":40317,"commits":5985,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":356408,"double":205362,"commits":8983,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-04","convention":{"lang":"js","comma":{"first":49023,"last":307197,"commits":5780,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":715250,"space":2883349,"commits":10353,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":99105,"nospace":182041,"commits":6511,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33838,"nospace":508529,"commits":7885,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":209061,"bothspace":49772,"nospace":77504,"commits":6978,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":194194,"nospace":47599,"commits":6057,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":479810,"double":245706,"commits":9188,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-03","convention":{"lang":"js","comma":{"first":44044,"last":293676,"commits":5031,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":617756,"space":2685970,"commits":9347,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":81636,"nospace":182864,"commits":5905,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21367,"nospace":495320,"commits":7149,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":181926,"bothspace":40892,"nospace":78515,"commits":6193,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":184001,"nospace":50835,"commits":5503,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":413417,"double":261179,"commits":8351,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-02","convention":{"lang":"js","comma":{"first":28123,"last":320155,"commits":5466,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":881597,"space":2634309,"commits":10205,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":72537,"nospace":166379,"commits":6007,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36288,"nospace":443912,"commits":7658,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":199436,"bothspace":40887,"nospace":71307,"commits":6410,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":171563,"nospace":56095,"commits":5950,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":386880,"double":282587,"commits":8861,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-08-01","convention":{"lang":"js","comma":{"first":27261,"last":288680,"commits":5776,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":668851,"space":2552642,"commits":10863,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":78936,"nospace":147097,"commits":6376,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":40959,"nospace":420596,"commits":8067,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":204524,"bothspace":43151,"nospace":62941,"commits":6767,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":176356,"nospace":38952,"commits":6243,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":378922,"double":241930,"commits":9470,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-31","convention":{"lang":"js","comma":{"first":26133,"last":337884,"commits":6145,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":528714,"space":2433239,"commits":11268,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68709,"nospace":147024,"commits":6702,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20824,"nospace":412386,"commits":8541,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":192769,"bothspace":38986,"nospace":76690,"commits":7073,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":158098,"nospace":41950,"commits":6639,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":353345,"double":301335,"commits":9840,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-30","convention":{"lang":"js","comma":{"first":25347,"last":235096,"commits":5658,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":566322,"space":2064402,"commits":10375,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":57002,"nospace":130467,"commits":6066,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20824,"nospace":355139,"commits":7785,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":162684,"bothspace":31149,"nospace":61079,"commits":6607,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":136213,"nospace":39652,"commits":6034,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":306811,"double":216240,"commits":8923,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-29","convention":{"lang":"js","comma":{"first":31423,"last":291115,"commits":6193,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":622789,"space":2587458,"commits":11399,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":80469,"nospace":151763,"commits":6667,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":30017,"nospace":436890,"commits":8479,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":203159,"bothspace":42391,"nospace":77251,"commits":7193,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":172701,"nospace":41792,"commits":6600,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":389470,"double":248092,"commits":9736,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-28","convention":{"lang":"js","comma":{"first":54253,"last":309407,"commits":5848,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":713722,"space":3002006,"commits":10455,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":98941,"nospace":183881,"commits":6824,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":33339,"nospace":533906,"commits":8228,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":223338,"bothspace":50573,"nospace":81374,"commits":6989,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":205683,"nospace":55863,"commits":6289,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":486692,"double":259191,"commits":9339,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-27","convention":{"lang":"js","comma":{"first":67859,"last":364480,"commits":5896,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":714814,"space":3651615,"commits":10611,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":117672,"nospace":224887,"commits":6948,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":29112,"nospace":663539,"commits":8316,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":255438,"bothspace":57015,"nospace":95441,"commits":7178,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":257565,"nospace":66566,"commits":6349,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":601903,"double":312075,"commits":9624,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-26","convention":{"lang":"js","comma":{"first":43933,"last":281350,"commits":5701,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":530404,"space":2677253,"commits":10550,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":82727,"nospace":155778,"commits":6560,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":24145,"nospace":459215,"commits":8132,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":197403,"bothspace":42598,"nospace":63825,"commits":6852,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":179863,"nospace":43107,"commits":6126,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":409421,"double":261347,"commits":9458,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-25","convention":{"lang":"js","comma":{"first":40248,"last":377635,"commits":6042,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":622704,"space":2733482,"commits":11303,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":85437,"nospace":159662,"commits":6915,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25044,"nospace":460368,"commits":8655,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":198583,"bothspace":47355,"nospace":80214,"commits":7346,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":173613,"nospace":46864,"commits":6681,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":418865,"double":346814,"commits":9820,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-24","convention":{"lang":"js","comma":{"first":19230,"last":233494,"commits":5549,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":471178,"space":1900554,"commits":10411,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":49199,"nospace":115969,"commits":6229,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21157,"nospace":319765,"commits":7946,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":164934,"bothspace":28160,"nospace":54135,"commits":6630,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":119819,"nospace":38743,"commits":6165,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":282777,"double":218020,"commits":9021,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-23","convention":{"lang":"js","comma":{"first":30078,"last":274850,"commits":5448,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":535066,"space":2216238,"commits":9903,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67589,"nospace":132882,"commits":5938,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":22801,"nospace":367925,"commits":7506,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":177450,"bothspace":36630,"nospace":58250,"commits":6356,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":140048,"nospace":34877,"commits":5910,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":323999,"double":221080,"commits":8627,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-22","convention":{"lang":"js","comma":{"first":22376,"last":252046,"commits":5169,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":620518,"space":2072465,"commits":9479,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":58456,"nospace":127171,"commits":5632,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":19322,"nospace":348069,"commits":7204,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":193433,"bothspace":38743,"nospace":60282,"commits":6054,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":127423,"nospace":38798,"commits":5622,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":292676,"double":244325,"commits":8258,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-21","convention":{"lang":"js","comma":{"first":69863,"last":372307,"commits":5852,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":815480,"space":3353885,"commits":10791,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":103493,"nospace":202422,"commits":6967,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":36003,"nospace":579155,"commits":8362,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":236729,"bothspace":57265,"nospace":82163,"commits":7135,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":222174,"nospace":59545,"commits":6394,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":547336,"double":314209,"commits":9721,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-20","convention":{"lang":"js","comma":{"first":62028,"last":364733,"commits":4691,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":615684,"space":3201303,"commits":8962,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":96747,"nospace":193092,"commits":5775,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25151,"nospace":555731,"commits":6910,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":256686,"bothspace":38973,"nospace":81342,"commits":5921,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":211237,"nospace":54776,"commits":5307,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]},"quotes":{"single":244591,"double":163008,"commits":4405,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}]}}},{"lang":"js","file":"2013-07-19","convention":{"lang":"js","comma":{"first":38585,"last":233803,"commits":5435,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":617551,"space":2313711,"commits":10061,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":68214,"nospace":144336,"commits":6112,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27090,"nospace":400979,"commits":7599,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":165711,"bothspace":36467,"nospace":57692,"commits":6399,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":153230,"nospace":41991,"commits":5851,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}},{"lang":"js","file":"2013-07-18","convention":{"lang":"js","comma":{"first":29621,"last":278382,"commits":6034,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":648291,"space":2301370,"commits":10871,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":67046,"nospace":147336,"commits":6501,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":25321,"nospace":401945,"commits":8223,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":198093,"bothspace":39816,"nospace":63396,"commits":6947,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":150767,"nospace":44881,"commits":6387,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}},{"lang":"js","file":"2013-07-17","convention":{"lang":"js","comma":{"first":28888,"last":242970,"commits":6328,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":557461,"space":2177430,"commits":11641,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":64948,"nospace":134536,"commits":6948,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":21303,"nospace":379610,"commits":8782,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":166443,"bothspace":42136,"nospace":64753,"commits":7450,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":141428,"nospace":45138,"commits":6755,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}},{"lang":"js","file":"2013-07-16","convention":{"lang":"js","comma":{"first":29551,"last":276972,"commits":6298,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":607734,"space":2429873,"commits":11618,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":63280,"nospace":160113,"commits":6892,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":20713,"nospace":427795,"commits":8746,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":189030,"bothspace":43051,"nospace":64733,"commits":7303,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":161301,"nospace":48004,"commits":6695,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}},{"lang":"js","file":"2013-07-15","convention":{"lang":"js","comma":{"first":21338,"last":187989,"commits":3294,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":394462,"space":1647047,"commits":6003,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":45643,"nospace":111205,"commits":3576,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":15445,"nospace":289008,"commits":4492,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":117077,"bothspace":22913,"nospace":40679,"commits":3845,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":110319,"nospace":26726,"commits":3442,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}},{"lang":"js","file":"2013-07-14","convention":{"lang":"js","comma":{"first":35119,"last":221448,"commits":4051,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":516085,"space":1955002,"commits":7942,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":53289,"nospace":136488,"commits":4840,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":27452,"nospace":349874,"commits":5918,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":145285,"bothspace":41889,"nospace":57583,"commits":5034,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":131602,"nospace":45520,"commits":4583,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}},{"lang":"js","file":"2013-07-13","convention":{"lang":"js","comma":{"first":17424,"last":75943,"commits":1062,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}]},"indent":{"tab":170476,"space":821676,"commits":2448,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"functiondef":{"onespace":23758,"nospace":54004,"commits":1465,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}]},"argumentdef":{"onespace":9233,"nospace":148297,"commits":1776,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}]},"literaldef":{"tracespace":57304,"bothspace":10395,"nospace":22923,"commits":1443,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}]},"conditionstatement":{"onespace":54305,"nospace":19106,"commits":1360,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}]}}}],"scores":{"lang":"js","comma":{"first":6962217,"last":98255323,"commits":1744100,"title":"Last comma vs. First comma","column":[{"key":"first","display":"First comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>\n  , bar = <span class=\"number\">2</span>\n  , baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>\n  , bar: <span class=\"number\">2</span>\n  , baz: <span class=\"number\">3</span>\n};"},{"key":"last","display":"Last comma","code":"<span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>,\n    bar = <span class=\"number\">2</span>,\n    baz = <span class=\"number\">3</span>;\n\n<span class=\"keyword\">var</span> obj = {\n    foo: <span class=\"number\">1</span>,\n    bar: <span class=\"number\">2</span>,\n    baz: <span class=\"number\">3</span>\n};"}],"total":105217540},"indent":{"tab":179677078,"space":747946506,"commits":3213334,"title":"Space vs. Tab","column":[{"key":"tab","display":"Tab","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// use tab for indentation</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"space","display":"Space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}],"total":927623584},"functiondef":{"onespace":21215982,"nospace":43994123,"commits":1917450,"title":"Function followed by one space vs. Function followed by no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span>;\n}"}],"total":65210105},"argumentdef":{"onespace":8054889,"nospace":125411090,"commits":2401207,"title":"Arguments definition with one space vs. no space","column":[{"key":"onespace","display":"One space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">( arg1, arg2 )</span> {</span>\n  <span class=\"comment\">// ...</span>\n}\n\n<span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) {\n  <span class=\"comment\">// ...</span>\n}"},{"key":"nospace","display":"No space","code":"<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(arg1, arg2)</span> {</span>\n<span class=\"comment\">//or</span>\n<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {"}],"total":133465979},"literaldef":{"tracespace":57564434,"bothspace":12547172,"nospace":20036419,"commits":2059609,"title":"Object Literal Definition types","column":[{"key":"tracespace","display":"Followed by space","code":"{\n  foo: <span class=\"number\">1</span>,\n  bar: <span class=\"number\">2</span>,\n  baz: <span class=\"number\">3</span>\n}"},{"key":"bothspace","display":"Using space in before/after","code":"{\n  foo : <span class=\"number\">1</span>,\n  bar : <span class=\"number\">2</span>,\n  baz : <span class=\"number\">3</span>\n}"},{"key":"nospace","display":"No space","code":"{\n  foo:<span class=\"number\">1</span>,\n  bar:<span class=\"number\">2</span>,\n  baz:<span class=\"number\">3</span>\n}"}],"total":90148025},"conditionstatement":{"onespace":48872546,"nospace":13104376,"commits":1838198,"title":"How to write conditional statement","column":[{"key":"onespace","display":"Condition with one space","code":"<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span> (v) {\n  <span class=\"comment\">//...</span>\n}"},{"key":"nospace","display":"Condition with no space","code":"<span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) {\n  <span class=\"comment\">//...</span>\n}\n\n<span class=\"keyword\">switch</span>(v) {\n  <span class=\"comment\">//...</span>\n}"}],"total":61976922},"quotes":{"single":109529604,"double":84001263,"commits":2737242,"title":"Single quote vs double quotes","column":[{"key":"single","display":"Single quote","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>};"},{"key":"double","display":"Double quotes","code":"<span class=\"keyword\">var</span> foo = <span class=\"string\">\"bar\"</span>;\n\n<span class=\"keyword\">var</span> obj = { <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>};"}],"total":193530867}}}}